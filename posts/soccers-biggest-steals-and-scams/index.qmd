---
title: "Soccer's Biggest Steals and Scams: An Analysis of Transfer Business in Soccer Transfer Markets"
author: "Sashwat Venkatesh"
date: "2023-10-31"
categories: [news]
format:
  html:
    code-fold: true
---

Transfer business has become an absolutely integral part of any soccer club's plans to contend for titles at a domestic, regional, or international level. In this analysis, I've delved into the most expensive transfers of all time, seeing if some big name players really warranted their transfers prices based on accepted market valuations, and officially listed fees, and seeing if there has ever been arbitrage in the player transfer market - a situation where a player was severely undervalued for what they produced.

```{r}
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
suppressMessages(library(ggplot2))
suppressMessages(library(ggrepel))

suppressMessages(clubs <- read_csv("~/Desktop/TransferMarkt Data/clubs.csv"))
suppressMessages(players <- read_csv("~/Desktop/TransferMarkt Data/players.csv"))
suppressMessages(player_valuations<- read_csv("~/Desktop/TransferMarkt Data/player_valuations.csv"))
suppressMessages(games <- read_csv("~/Desktop/TransferMarkt Data/games.csv"))
suppressMessages(game_events <- read_csv("~/Desktop/TransferMarkt Data/game_events.csv"))
suppressMessages(comps <- read_csv("~/Desktop/TransferMarkt Data/competitions.csv"))
suppressMessages(club_games <- read_csv("~/Desktop/TransferMarkt Data/club_games.csv"))
suppressMessages(appearances <- read_csv("~/Desktop/TransferMarkt Data/appearances.csv"))
```

From TransferMarkt, an online aggregator of statistics and valuations, we've gathered data on clubs, players, the valuations of players, EVERY game played, and the events within that game, such as bookings, goals, and substitutions, along with details on competitions around the world, games played by clubs, and individual player appearances.

This wide spread of data allows us to do a lot of analysis, which individuals across the internet have applied their data analytics skills to.

NOTE: The data was pulled from https://www.kaggle.com/datasets/davidcariboo/player-scores/data, which is a Kaggle repository that self-updates every week following the conclusion of matchweeks. My version of the data is from the first week of October. The aforementioned data analysis projects can be found in the "Code" tab at the Kaggle link provided.

```{r}
player_stats <-function(name, year) {

df <- merge(appearances, games, by="game_id", all.x=TRUE)

df$goals_for <- ifelse(df$home_club_id == df$player_club_id, df$home_club_goals,
                           ifelse(df$away_club_id == df$player_club_id, df$away_club_goals, NA))

df$goals_against <- ifelse(df$home_club_id == df$player_club_id, df$away_club_goals,
                               ifelse(df$away_club_id == df$player_club_id, df$home_club_goals, NA))
    df$clean_sheet <- ifelse(df$goals_against == 0, 1,
                            ifelse(df$goals_against > 0, 0, NA))
    
if (year == "all") {
  df <- df |> group_by(player_id, player_name, season) |> 
  summarise(
    g = sum(goals),
    a = sum(assists),
    cs = sum(clean_sheet),
    yc = sum(yellow_cards),
    rc = sum(red_cards),
    app = n()
  ) |> filter(player_name == name)
}
else {
  df <- df |> group_by(player_id, player_name, season) |> 
  summarise(
    g = sum(goals),
    a = sum(assists),
    cs = sum(clean_sheet),
    app = n()
  ) |> filter(player_name == name) |> filter(season == year)
}
df
}
```


Using the data, we're actually able to extract players' season by season data, finding out how many goals, assists, clean sheets, and any other values we want per season. I've limited this to the key statistics, which include goals, assists, clean sheets, yellow cards, red cards, and appearances.

```{r}
suppressMessages(head(player_stats("Lionel Messi", "all")))
```
```{r}
get_pid <- function(player) {
  pRow <- players |> filter(name == player)
  pRow$player_id
}

valuation_history <- function(player) {
  temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

ggplot() +
  geom_line(data = temp, aes(x=temp$date, y=temp$market_value_in_eur))
}

goalsGraph <- function(player) {
  tryCatch(
    {
      temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

temp2 <- player_stats(player, "all")

t <- list()
u <- list()
v <- list()

for (row1 in 1:nrow(temp2)) {
  for (row2 in 1:nrow(temp)) {
    if (temp[row2, "year"] == temp2[row1, "season"] + 1) {
      t <- append(t, temp2[row1, "g"])
      u <- append(u, temp[row2, "market_value_in_eur"])
      v <- append(v, temp[row2, "year"])
    }
  }
  
}

df <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))

ggplot() +
  geom_point(data=df, aes(x=goals, y=value), color="red") +
  geom_smooth(data=df, aes(x=goals, y=value), method="lm") +
  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +
  xlab("Goals") +
  ylab("Market Value, Euros") +
  labs(title=paste(player, "Market Value vs. Goals Scored") , caption="Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh")  + theme_minimal()

    },
    error=function(e) {
            message('An Error Occurred')
            print(e)
    },
    warning=function(w) {
            message('A Warning Occurred')
            print(w)
            return(NA)
    }
  )
  
  }
```


```{r}
valueGraph <- function(player) {
      temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

ggplot() +
  geom_line(data=temp, aes(x=year, y=market_value_in_eur)) + 
  ylab("Market Value, Euros") +
  xlab("Season") +
  labs(title=paste(player, "Market Value by Season") , caption="Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh")
  
  }
```


```{r}
suppressMessages(goalsGraph("Lionel Messi"))
suppressMessages(valueGraph("Lionel Messi"))
```


Looking at the values for Lionel Messi, we can call out a few things: First, his high scoring seasons seem to tilt the regression upwards, and since there are a lot of them, there may really be a "greatest of all time" tax. We can also resoanably state that Messi is probably past his peak on account of two factors.

Primarily, his goals production year-over-year has been decreasing, and his market valuations have been on a similar downturn since 2019. The end is likely(?) year for the 36 year old, who won his record-breaking 8th Ballon D'Or on Monday night.

```{r}
suppressMessages(goalsGraph("Neymar"))
suppressMessages(valueGraph("Neymar"))
```

Looking at the pair of graphs tracking Neymar's progress above, a couple of interesting points present themselves. It seems as though Neymar's market value seems relatively untouched or unaffected by his statistical performance, in terms of goals. Neymar's often been injured, and his impact has been minimized for this reason, but when he's on the pitch, what he does in undoubted. This specific case shows us the power of narratives - that is, how much a player's intangibles or uncountable statistics really contribute to their value. Most would tell you that Neymar is the epitome of this category, and it's safe to say that crowd is probably right.

```{r}
suppressMessages(goalsGraph("Kylian Mbappé"))
suppressMessages(valueGraph("Kylian Mbappé"))
```

```{r}
suppressMessages(goalsGraph("Antoine Griezmann"))
suppressMessages(valueGraph("Antoine Griezmann"))
```

```{r}
goalsGraphGA <- function(player) {
  tryCatch(
    {
      temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

temp2 <- player_stats(player, "all")

t <- list()
u <- list()
v <- list()

for (row1 in 1:nrow(temp2)) {
  for (row2 in 1:nrow(temp)) {
    if (temp[row2, "year"] == temp2[row1, "season"] + 1) {
      t <- append(t, temp2[row1, "g"] + temp2[row1, "a"])
      u <- append(u, temp[row2, "market_value_in_eur"])
      v <- append(v, temp[row2, "year"])
    }
  }
  
}

df <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))

ggplot() +
  geom_point(data=df, aes(x=goals, y=value), color="red") +
  geom_smooth(data=df, aes(x=goals, y=value), method="lm") +
  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +
  xlab("G+A") +
  ylab("Market Value, Euros") +
  labs(title=paste(player, "Market Value vs. G+A") , caption="Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh")  + theme_minimal()

    },
    error=function(e) {
            message('An Error Occurred')
            print(e)
    },
    warning=function(w) {
            message('A Warning Occurred')
            print(w)
            return(NA)
    }
  )
  
  }
```

```{r}
suppressMessages(goalsGraphGA("Philippe Coutinho"))
suppressMessages(valueGraph("Philippe Coutinho"))
```

```{r}
suppressMessages(goalsGraphGA("Jack Grealish"))
suppressMessages(valueGraph("Jack Grealish"))
```

```{r}
suppressMessages(goalsGraphGA("Declan Rice"))
suppressMessages(valueGraph("Declan Rice"))
```

```{r}
goalsGraphDef <- function(player) {
  tryCatch(
    {
      temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

temp2 <- player_stats(player, "all")

t <- list()
u <- list()
v <- list()

for (row1 in 1:nrow(temp2)) {
  for (row2 in 1:nrow(temp)) {
    if (temp[row2, "year"] == temp2[row1, "season"] + 1) {
      t <- append(t, temp2[row1, "cs"])
      u <- append(u, temp[row2, "market_value_in_eur"])
      v <- append(v, temp[row2, "year"])
    }
  }
  
}

df <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))

ggplot() +
  geom_point(data=df, aes(x=goals, y=value), color="red") +
  geom_smooth(data=df, aes(x=goals, y=value), method="lm") +
  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +
  xlab("Clean Sheets") +
  ylab("Market Value, Euros") +
  labs(title=paste(player, "Market Value vs. Clean Sheets") , caption="Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh")  + theme_minimal()

    },
    error=function(e) {
            message('An Error Occurred')
            print(e)
    },
    warning=function(w) {
            message('A Warning Occurred')
            print(w)
            return(NA)
    }
  )
}
```


```{r}
suppressMessages(goalsGraphDef("Harry Maguire"))
suppressMessages(valueGraph("Harry Maguire"))
```

```{r}
suppressMessages(goalsGraphDef("Matthijs de Ligt"))
suppressMessages(valueGraph("Matthijs de Ligt"))
```

```{r}
suppressMessages(goalsGraphDef("Lucas Hernández"))
suppressMessages(valueGraph("Lucas Hernández"))
```

```{r}
goalsGraphGK <- function(player) {
  tryCatch(
    {
      temp <- player_valuations |> 
  filter(player_id == get_pid(player)) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)

temp2 <- player_stats(player, "all")

t <- list()
u <- list()
v <- list()

for (row1 in 1:nrow(temp2)) {
  for (row2 in 1:nrow(temp)) {
    if (temp[row2, "year"] == temp2[row1, "season"] + 1) {
      t <- append(t, temp2[row1, "cs"])
      u <- append(u, temp[row2, "market_value_in_eur"])
      v <- append(v, temp[row2, "year"])
    }
  }
  
}

df <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))

ggplot() +
  geom_point(data=df, aes(x=goals, y=value), color="red") +
  geom_smooth(data=df, aes(x=goals, y=value), method="lm") +
  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +
  xlab("Clean Sheets") +
  ylab("Market Value, Euros") +
  labs(title=paste(player, "Market Value vs. Clean Sheets") , caption="Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh")  + theme_minimal()

    },
    error=function(e) {
            message('An Error Occurred')
            print(e)
    },
    warning=function(w) {
            message('A Warning Occurred')
            print(w)
            return(NA)
    }
  )
}
```



```{r}
suppressMessages(goalsGraphGK("Kepa Arrizabalaga"))
suppressMessages(valueGraph("Kepa Arrizabalaga"))
```

```{r}
suppressMessages(goalsGraphGK("Alisson"))
suppressMessages(valueGraph("Alisson"))
```

```{r}
suppressMessages(goalsGraphGK("André Onana"))
suppressMessages(valueGraph("André Onana"))
```

Looking at the pairs of graphs above, we can make some generalized conclusions and bucket players into some broad categories. Players like Kylian Mbappe, Jack Grealish, and Declan Rice are just entering their peaks, or are at least in the period of time where a player's value baloons at the greatest rate. More "developed" players like Matthijs de Light, Lucas Hernandez, and Andre Onana seem to have found the spot in their careers where they are at their peak of market value and performance, and would almost certainly be shoe-ins to most, if not all, teams in the world. 

Other players, like GKs Alisson, Kepa, as well as CB Harry Maguire, and Forwards Phillipe Coutinho and Antoine Griezmann are seemingly "past their prime" in terms of market value, but are mainstages in their teams at Liverpool, Real Madrid (on loan from Chelsea), Manchester United, Aston Villa, and Atletico Madrid, respectively.

While the above players were selected for a variety of reasons, the main reason was their status as the players who had the highest transfer fees at their respective general positions (F, M, D, G). Goals were used to estimate forwards' production, while the sum of goals and assists were used to estimate the production value of midfielders. Clean sheets (a VERY rough statistic) were used to estimate the performance of defenders and goalkeepers.

Given the above conditions, however, there were some players I had to skip over. Enzo Fernandez(M, Chelsea) and Josko Gvardiol(D, Manchester City) were skipped due to a lack of season data in the TransferMarkt dataset. This is reasonable, since they are both now just playing their 3rd and 4th full seasons in major soccer leagues, and as such, their data was incredibly skewed. Joao Felix, a forward for FC Barcelona on loan from Atletico Madrid, was excluded despite being the 3rd highest transfer fee signing of all time due to a variety of injuries and loans that have hampered his playing time, despite having a handful of seasons under his belt. Wesley Fofana, a defender for Chelsea, was skipped for a similar reason, having only played 24 league games in the last 3 full seasons.

############ November 20th:

My largest question is merging the datasets in a way that will allow me to make effective queries on the data. The data from Football Reference isn't structured the same way as the data from TransferMarkt, and focusing on how I can aggregate each season's statistics and then merge onto my original dataframes in order to make the analysis more robust.

############# December 3rd:
I've realized that Football Reference is the holy grail. Not that this was ever really in doubt, but I was doing things in a really convulted and silly way by going through a lot of Relational Database work to get the same information/tables that FBRef already has aggregated. The only data that I really need from the TransferMarkt dataset now is the player_valuations set, on which I already have a function to generate a player's valuation by season above. I think I'm going to scrap a lot of the above graphics and writing, since it's really chaotic, and from the (much simpler) code below, we can see that there's a much easier way to do things.

Below is a function using Rvest and janitoR that allows me to scrape season-by-season domestic league data for any player that FBRef has in their database. I had to use some regex (line 447) to get this to work. See https://fbref.com/en/players/1f44ac21/Erling-Haaland for an example of why the or condition in the regex is required, as well as in general why the regex is required. I've also dropped the per 90 stats, because we have a 90s column that can be used to calculate these values on the fly. Having the 90s values also makes ggplot upset beacuse we have "duplicate column names" that somehow have different data.

I also had to build in positional logic, because goalies and defenders shouldn't be judged on the same statistics as Midfielders and attackers.

In terms of visuals, I think I'll be using line charts like I used in the first presentation, but also I'm going to try and use some sort of chart that shows what variables contribute most to a player's value. For example, can I (even roughly) quantify how much a Striker's goal tally contributes to their value as compared to their assist tally? I'm thinking of doing a coefficient analysis and also looking at p-values to make this happen. 

FBRef has the extra "advanced" statistics that I really wanted, like progressive carries and passes, but also xG and xA, which I can use to get a better understanding of a player's value.

Some downfalls to my new methodology:
1. I'm only looking at domestic league games. While this should be the majority of the games a player plays, it still omits what I would consider a non-insignificant amount of games from my dataset.
2. There's some inconsistency with data tracking across leagues. For example, the Premier League had some advanced metrics before a league like the Austrian Bundesliga, so it's something to keep in mind. 


```{r}
library(rvest)
library(janitor)
library(ggplot2)
getFBRefData <- function(url, pos="A/M") {
  
  
  webpage <- read_html(url)
  if (pos == "A/M") {
    table_id <- "stats_standard_dom_lg"
    p3 <- webpage %>% html_node(paste("#", table_id, sep = "")) %>% html_table()
    p3 <- row_to_names(p3, 1, remove_rows_above = FALSE)
    p3 <- p3 |> select(1:25)
    regex <- "[0-9]{4}-[0-9]{4}|[0-9]{4}"
    p3 <- p3 |> filter(cumsum(!grepl(regex, Season)) == 0) #This line drops all rows after the individual seasons
    p3$Min <- as.numeric(gsub(",", "", p3$Min))
    p3 <- p3 |> mutate_at(7:25, as.numeric) #turn all the actual data columns into numbers 
    return(p3)
  }
  if (pos =="GK") {
    table_id <- "stats_keeper_dom_lg"
    p3 <- webpage %>% html_node(paste("#", table_id, sep = "")) %>% html_table()
    p3 <- row_to_names(p3, 1, remove_rows_above = FALSE)
    names(p3)[15] <- "NormalSave%"
    names(p3)[25] <- "PenSave%"
    p3 <- p3 |> select(1:25)
    regex <- "[0-9]{4}-[0-9]{4}|[0-9]{4}"
    p3 <- p3 |> filter(cumsum(!grepl(regex, Season)) == 0) #This line drops all rows after the individual seasons
    p3$Min <- as.numeric(gsub(",", "", p3$Min))
    p3 <- p3 |> mutate_at(7:25, as.numeric) #turn all the actual data columns into numbers 
    return(p3)
  }
  if (pos =="DEF") {
    table_id <- "stats_defense_dom_lg"
    p3 <- webpage %>% html_node(paste("#", table_id, sep = "")) %>% html_table()
    p3 <- row_to_names(p3, 1, remove_rows_above = FALSE)
    names(p3)[13] <- "TklChall"
    p3 <- p3 |> select(1:23)
    regex <- "[0-9]{4}-[0-9]{4}|[0-9]{4}"
    p3 <- p3 |> filter(cumsum(!grepl(regex, Season)) == 0) #This line drops all rows after the individual seasons
    #p3$Min <- as.numeric(gsub(",", "", p3$Min))
    p3 <- p3 |> mutate_at(7:23, as.numeric) #turn all the actual data columns into numbers 
    return(p3)
  }
  
  
}

```
```{r}
temp <- getFBRefData("https://fbref.com/en/players/132a82f1/Wesley-Fofana", "DEF")

temp
```



