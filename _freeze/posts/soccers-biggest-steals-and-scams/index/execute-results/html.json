{
  "hash": "55f46d6d77c890586314e9f8356d7b96",
  "result": {
    "markdown": "---\ntitle: \"Soccer's Biggest Steals and Scams: An Analysis of Transfer Business in Soccer Transfer Markets\"\nauthor: \"Sashwat Venkatesh\"\ndate: \"2023-10-31\"\ncategories: [news]\nformat:\n  html:\n    code-fold: true\n---\n\n\nTransfer business has become an absolutely integral part of any soccer club's plans to contend for titles at a domestic, regional, or international level. In this analysis, I've delved into the most expensive transfers of all time, seeing if some big name players really warranted their transfers prices based on accepted market valuations, and officially listed fees, and seeing if there has ever been arbitrage in the player transfer market - a situation where a player was severely undervalued for what they produced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(lubridate))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\n\nsuppressMessages(clubs <- read_csv(\"~/Desktop/TransferMarkt Data/clubs.csv\"))\nsuppressMessages(players <- read_csv(\"~/Desktop/TransferMarkt Data/players.csv\"))\nsuppressMessages(player_valuations<- read_csv(\"~/Desktop/TransferMarkt Data/player_valuations.csv\"))\nsuppressMessages(games <- read_csv(\"~/Desktop/TransferMarkt Data/games.csv\"))\nsuppressMessages(game_events <- read_csv(\"~/Desktop/TransferMarkt Data/game_events.csv\"))\nsuppressMessages(comps <- read_csv(\"~/Desktop/TransferMarkt Data/competitions.csv\"))\nsuppressMessages(club_games <- read_csv(\"~/Desktop/TransferMarkt Data/club_games.csv\"))\nsuppressMessages(appearances <- read_csv(\"~/Desktop/TransferMarkt Data/appearances.csv\"))\n```\n:::\n\n\nFrom TransferMarkt, an online aggregator of statistics and valuations, we've gathered data on clubs, players, the valuations of players, EVERY game played, and the events within that game, such as bookings, goals, and substitutions, along with details on competitions around the world, games played by clubs, and individual player appearances.\n\nThis wide spread of data allows us to do a lot of analysis, which individuals across the internet have applied their data analytics skills to.\n\nNOTE: The data was pulled from https://www.kaggle.com/datasets/davidcariboo/player-scores/data, which is a Kaggle repository that self-updates every week following the conclusion of matchweeks. My version of the data is from the first week of October. The aforementioned data analysis projects can be found in the \"Code\" tab at the Kaggle link provided.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_stats <-function(name, year) {\n\ndf <- merge(appearances, games, by=\"game_id\", all.x=TRUE)\n\ndf$goals_for <- ifelse(df$home_club_id == df$player_club_id, df$home_club_goals,\n                           ifelse(df$away_club_id == df$player_club_id, df$away_club_goals, NA))\n\ndf$goals_against <- ifelse(df$home_club_id == df$player_club_id, df$away_club_goals,\n                               ifelse(df$away_club_id == df$player_club_id, df$home_club_goals, NA))\n    df$clean_sheet <- ifelse(df$goals_against == 0, 1,\n                            ifelse(df$goals_against > 0, 0, NA))\n    \nif (year == \"all\") {\n  df <- df |> group_by(player_id, player_name, season) |> \n  summarise(\n    g = sum(goals),\n    a = sum(assists),\n    cs = sum(clean_sheet),\n  ) |> filter(player_name == name)\n}\nelse {\n  df <- df |> group_by(player_id, player_name, season) |> \n  summarise(\n    g = sum(goals),\n    a = sum(assists),\n    cs = sum(clean_sheet),\n    app = n()\n  ) |> filter(player_name == name) |> filter(season == year)\n}\ndf\n}\n```\n:::\n\n\n\nUsing the data, we're actually able to extract players' season by season data, finding out how many goals, assists, clean sheets, and any other values we want per season. I've limited this to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(player_stats(\"Lionel Messi\", \"all\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n# Groups:   player_id, player_name [1]\n  player_id player_name  season     g     a    cs\n      <dbl> <chr>         <dbl> <dbl> <dbl> <dbl>\n1     28003 Lionel Messi   2012    60    17    11\n2     28003 Lionel Messi   2013    41    14    19\n3     28003 Lionel Messi   2014    58    31    31\n4     28003 Lionel Messi   2015    41    24    21\n5     28003 Lionel Messi   2016    54    20    19\n6     28003 Lionel Messi   2017    45    20    29\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_pid <- function(player) {\n  pRow <- players |> filter(name == player)\n  pRow$player_id\n}\n\nvaluation_history <- function(player) {\n  temp <- player_valuations |> \n  filter(player_id == get_pid(player)) |> filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |> \n  arrange(date)\n\ntemp <- temp |>\n  mutate(year = lubridate::year(date)) |>  # Create a new column with the year\n  group_by(year) |>\n  filter(date == max(date)) |>\n  select(-year)\n\nggplot() +\n  geom_line(data = temp, aes(x=temp$date, y=temp$market_value_in_eur))\n}\n\ngoalsGraph <- function(player) {\n  tryCatch(\n    {\n      temp <- player_valuations |> \n  filter(player_id == get_pid(player)) |> filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |> \n  arrange(date)\n\ntemp <- temp |>\n  mutate(year = lubridate::year(date)) |>  # Create a new column with the year\n  group_by(year) |>\n  filter(date == max(date)) |>\n  select(-year)\n\ntemp2 <- player_stats(player, \"all\")\n\nt <- list()\nu <- list()\nv <- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t <- append(t, temp2[row1, \"g\"])\n      u <- append(u, temp[row2, \"market_value_in_eur\"])\n      v <- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"Goals\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. Goals Scored\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n  \n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraph(\"Lionel Messi\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraph(\"Neymar\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraph(\"Kylian Mbappé\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraph(\"João Félix\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphGA <- function(player) {\n  tryCatch(\n    {\n      temp <- player_valuations |> \n  filter(player_id == get_pid(player)) |> filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |> \n  arrange(date)\n\ntemp <- temp |>\n  mutate(year = lubridate::year(date)) |>  # Create a new column with the year\n  group_by(year) |>\n  filter(date == max(date)) |>\n  select(-year)\n\ntemp2 <- player_stats(player, \"all\")\n\nt <- list()\nu <- list()\nv <- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t <- append(t, temp2[row1, \"g\"] + temp2[row1, \"a\"])\n      u <- append(u, temp[row2, \"market_value_in_eur\"])\n      v <- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"G+A\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. G+A\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n  \n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphGA(\"Philippe Coutinho\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphGA(\"Jack Grealish\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphGA(\"Declan Rice\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef <- function(player) {\n  tryCatch(\n    {\n      temp <- player_valuations |> \n  filter(player_id == get_pid(player)) |> filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |> \n  arrange(date)\n\ntemp <- temp |>\n  mutate(year = lubridate::year(date)) |>  # Create a new column with the year\n  group_by(year) |>\n  filter(date == max(date)) |>\n  select(-year)\n\ntemp2 <- player_stats(player, \"all\")\n\nt <- list()\nu <- list()\nv <- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t <- append(t, temp2[row1, \"cs\"])\n      u <- append(u, temp[row2, \"market_value_in_eur\"])\n      v <- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf <- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"Clean Sheets\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. Clean Sheets\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n  \n  }\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Harry Maguire\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Virgil van Dijk\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Wesley Fofana\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Lucas Hernández\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Kepa Arrizabalaga\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"Alisson\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngoalsGraphDef(\"André Onana\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `year`\n`summarise()` has grouped output by 'player_id', 'player_name'. You can\noverride using the `.groups` argument.\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nPlayers skipped and reasoning:\n- Enzo Fernandez, Midfielders: <3 seasons\n- Josko Gvardiol, Defender: <3 seasons\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}