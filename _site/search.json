[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/soccer-analysis/index.html",
    "href": "posts/soccer-analysis/index.html",
    "title": "For Players, Scoring Matters. But Shouldn’t Other Things Too?",
    "section": "",
    "text": "In world football, especially in modern football, nailing transfer business is absolutely an integral part of owning a club. Players like Erling Haaland, Cristiano Ronaldo, and Jude Bellingham are all examples of what a club can get if they accurately value and pay to acquire the best players.\nErling Haaland won the Premier League’s Golden Boot, along with its Most Valuable Player Award, in his first season at Manchester City. Cristiano Ronaldo became a Real Madrid and football legend after being acquired from Manchester United, and Jude Bellingham looks to be the next in line of young talents looking to stamp their mark on history after a summer transfer from Borussia Dortmund to Real Madrid.\nBut what actually drives a player’s value? For forwards, it must be more than just “how much does a striker score?”, right? As an evolution of my previous piece on transfer value adjustments, I’ve decided to look at what makes forwards valuable in the market.\nSome notes before we get started:\nMy dataset has (de)-evolved considerably, depending on who you ask. My initial data came entirely from TransferMarkt, an online aggregator of football statistics and player valuations. Now, I’ve added FootballReference’s scouting report data, which provides per90 minute data on players. I chose per90 to add some sort of standardization to the comparisons between players. Inherently, players who score more will have higher per90 goal-scoring statistics, but we shouldn’t penalize players for being efficient subsitutes too.\nFurthermore, I’m only looking at present year data. That is to say, the following assumption/consideration is being made: A player’s value (given by TransferMarkt in the summer window of 2023), is an CURRENT AND ACCURATE measurement on which we can make predictions on what contributes to forward player values. For example, Erling Haaland’s current market value is given as €180,000,000, and his scouting report statistics cover his last 365 days of playing. Effectively, we are taking the player’s last year of competition (domestic and national team), and using that to forecast current market value.\nThe data itself comes from this Kaggle dataset. For an example of what a scouting report looks like, see the table titled “Kylian Mbappé Scouting Report” here: Mbappe Scouting Report. My TransferMarkt Data also comes from Kaggle, via a scraper that pushes through TransferMarkt following the completion of the week’s games. Here is one of the files I used: Scraped TransferMarkt Data\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(lubridate))\nsuppressMessages(library(ggrepel))\nsuppressMessages(library(rvest))\nsuppressMessages(library(janitor))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(formattable))\nsuppressMessages(library(glmnet))\nsuppressMessages(library(ggalt))\n#suppressMessages(library(scales))\n\n\nsuppressMessages(player_valuations&lt;- read_csv(\"~/Desktop/TransferMarkt Data/player_valuations.csv\"))\nsuppressMessages(players &lt;- read_csv(\"~/Desktop/TransferMarkt Data/players.csv\"))\nlibrary(stringdist)\nget_pid &lt;- function(player) {\n  distances &lt;- stringdist::stringdist(players$name, player)\n  index_min_distance &lt;- which.min(distances)\n  string_with_lowest_distance &lt;- players$name[index_min_distance]\n  #print(paste(\"String with the lowest distance:\", string_with_lowest_distance))\n  pRow &lt;- players |&gt; filter(name == string_with_lowest_distance)\n  pRow$player_id\n}\n\nvalueTable &lt;- function(player) {\n      valtemp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\nvaltemp &lt;- valtemp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\nvaltemp$year &lt;- as.character(valtemp$year)\n\nvaltemp$Season &lt;- paste(as.numeric(valtemp$year) - 1, valtemp$year, sep = \"-\")\n\nret &lt;- valtemp |&gt; select( Season, year, market_value_in_eur, player_id) |&gt; filter(year == \"2023\") |&gt;\n  mutate(name = player) |&gt; select(market_value_in_eur, name)\n\n\nreturn(ret$market_value_in_eur)\n  }\n\n\nWe’ll do some code narration here. In the above two code blocks, I’ve imported the two chunks of TransferMarkt data that I need. The first dataframe contains every player valuation that TransferMarkt has assigned in the last ten years. The second dataframe has player names, a unique id in TransferMarkt’s database, and other supporting details like club and league names/ids, which aren’t particularly important. The functions in the second body of code retrieve a player’s summer 2023 valuation for use in the analysis that will follow later on.\nModel Building and Notes\n\n\nCode\nnew_data1 &lt;- read_csv(\"~/Downloads/archive(4)/Forwards.csv\")\n\n# Drop the first column\nnew_data &lt;- new_data1[, -1]\n\nstring_to_list &lt;- function(char_string) {\n  clean_string &lt;- gsub(\"(\\\\[|\\\\])\", \"\", char_string)\n  num_strings &lt;- strsplit(clean_string, \",\")[[1]]\n  num_strings &lt;- num_strings[num_strings != \"\"]\n  \n  num_list &lt;- as.numeric(num_strings)\n  return(num_list)\n}\n\n# Apply the function to the entire column\nnew_data &lt;- new_data |&gt;\n  mutate(`Attribute Vector` = lapply(`Attribute Vector`, string_to_list))\n\nnew_data &lt;- unnest_wider(new_data, `Attribute Vector`, names_sep = \".\")\n\nnew_data &lt;- new_data |&gt; rename(\n  'Non-Penalty Goals' = `Attribute Vector.1`,\n  'Non-Penalty xG' = `Attribute Vector.2`,\n  'Total Shots' = `Attribute Vector.3`,\n  'Assists' = `Attribute Vector.4`,\n  'xAG' = `Attribute Vector.5`,\n  'npxG + xAG' = `Attribute Vector.6`,\n  'Shot-Creating Actions' = `Attribute Vector.7`,\n  'Passes Attempted' = `Attribute Vector.8`,\n  'Pass Completion %' = `Attribute Vector.9`,\n  'Progressive Passes' = `Attribute Vector.10`,\n  'Progressive Carries' = `Attribute Vector.11`,\n  'Successful Take-Ons' = `Attribute Vector.12`,\n  'Touches (Att Pen)' = `Attribute Vector.13`,\n  'Progressive Passes Rec' = `Attribute Vector.14`,\n  'Tackles' = `Attribute Vector.15`,\n  'Interceptions' = `Attribute Vector.16`,\n  'Blocks' = `Attribute Vector.17`,\n  'Clearances' = `Attribute Vector.18`,\n  'Aerials won' = `Attribute Vector.19`\n)\n# View the updated dataframe\nnew_data &lt;- new_data |&gt; select(-Percentiles)\nnew_data &lt;- unique(new_data)\nnew_data$mv &lt;- lapply(new_data$Name, valueTable)\n#new_data\nnew_data &lt;- unnest_wider(new_data, mv, names_sep = \".\")\nnew_data &lt;- new_data |&gt; select(-`mv.2`)\n#new_data\nnew_data &lt;- na.omit(new_data)\npredictors &lt;- new_data |&gt; select(-Name, -`mv.1`)\ny &lt;- new_data$`mv.1`\nx &lt;- data.matrix(predictors)\ncv_model &lt;- cv.glmnet(x, y, alpha = 0.5)\n\nbest_lambda &lt;- cv_model$lambda.min\nbest_model &lt;- glmnet(x, y, alpha = 0.5, lambda = best_lambda)\n\n\n\n\nCode\nlibrary(Matrix)\n\n# Assuming coef(best_model) returns a dgCMatrix\ncoef_matrix &lt;- as.matrix(coef(best_model))  # Convert to dense matrix\n\n# Convert the dense matrix to a data frame\noutput &lt;- as.data.frame(coef_matrix)\noutput &lt;- output |&gt; rename(\"Coefficient Value\" = s0)\nbetas &lt;- output$`Coefficient Value`\npreds &lt;- t(as.matrix(x))\nnew_data &lt;- new_data |&gt; mutate(\n  `Predicted Value` = \n    betas[1] + \n    betas[2]*`Non-Penalty Goals` +\n    betas[3]*`Non-Penalty xG` +\n    betas[4]*`Total Shots` +\n    betas[5]*`Assists` +\n    betas[6]*`xAG` +\n    betas[7]*`npxG + xAG` +\n    betas[8]*`Shot-Creating Actions` +\n    betas[9]*`Passes Attempted` +\n    betas[10]*`Pass Completion %` +\n    betas[11]*`Progressive Passes` +\n    betas[12]*`Progressive Carries` +\n    betas[13]*`Successful Take-Ons` +\n    betas[14]*`Touches (Att Pen)` +\n    betas[15]*`Progressive Passes Rec` +\n    betas[16]*`Tackles` +\n    betas[17]*`Interceptions` +\n    betas[18]*`Blocks` +\n    betas[19]*`Clearances` +\n    betas[20]*`Aerials won`\n)\nnew_data &lt;- new_data |&gt; mutate(Differential = `mv.1`- `Predicted Value`)\nnew_data &lt;- new_data |&gt; rename(\"Market Value\" = `mv.1`)\n#new_data\n\n\n\n\nCode\nformattable(output |&gt; arrange(desc(`Coefficient Value`)) |&gt; filter(`Coefficient Value` != 0))\n\n\n\n\n\n\n\n\n\nCoefficient Value\n\n\n\n\n\n\nNon-Penalty xG\n\n\n38501036.82\n\n\n\n\nNon-Penalty Goals\n\n\n21172802.65\n\n\n\n\nAssists\n\n\n10615685.63\n\n\n\n\nnpxG + xAG\n\n\n9988091.92\n\n\n\n\nProgressive Carries\n\n\n2430498.27\n\n\n\n\nTouches (Att Pen)\n\n\n2180585.28\n\n\n\n\nSuccessful Take-Ons\n\n\n690751.68\n\n\n\n\nPass Completion %\n\n\n78719.21\n\n\n\n\nTackles\n\n\n-980684.38\n\n\n\n\nBlocks\n\n\n-1657766.55\n\n\n\n\n(Intercept)\n\n\n-28394597.98\n\n\n\n\n\n\n\nIn the above table, we can see the coefficients that are provided as outputs of our multiple regression model. In this situation, we’ve used Elastic Net Regression due to its combination of regularization, as well as its key feature of variable selection. Variable selection in regression models allows us to find the variables/predictors that are most relevant (not equal to 0).\n\nNon-Penalty xG\nNon-Penalty Goals\nAssists\nNon-Penalty xG + xAG\nProgressive Carries\nTouches Attacking Penalty Area\nSuccessful Take-Ons\nPass Completion %\nTackles\nBlocks\n\n\nInterestingly, Tackles and Blocks, two defensive statistics, are negatively correlated with forward value, indicating that forwards who are forced into more defensive actions are likely less valuable than those who participate in their team’s defense less. Depending on your school of thought when it comes to attackers, this can either agree with or go against your valuation of forwards. Some managers, clubs, and fans prefer forwards who track back and support their defenders in winning back possesion, while others prefer those who stay forward and are ready to capitalize on a counter as fast as possible once midfielders/defenders regain possesion.\nAnother interesting point are the factors that the model eliminated:\n\nTotal Shots\nxAG\nShot Creating Actions\nPasses Attempted\nProgressive Passes\nProgressive Passes Received\nInterceptions\nClearances\n\nThe model, unsurprisingly, tells us that Non-Penalty xG and Goals are the two most important factors in a forward’s valuation. More surprisingly, though, Progressive Carries and Touches in the Attacking Penalty Area were valued quite highly as well, the two factors that were most valuable outside of statistics tied directly to goals.\nValuation Analysis\nRoughly, we can take the difference between a player’s market value and predicted value to be either the value added (when the difference is positive) or the undervaluation (when the difference is negative). So when we see:\n\nNegative differential values, it means that a player's market value is lower than their predicted value. This would indicate, with some level of confidence, that the player is undervalued.\nPositive differential values, it means that a player is either:\n\nOvervalued\nHas some unquantifiable reasoning behind a higher value. This can be caused by missing factors in the data used in this investigation, or by some \"potential\" that can't be expressed through statistical methods.\n\n\n\n\n\nCode\nfinal &lt;- new_data |&gt; select(Name, `Market Value`, `Predicted Value`, Differential)\nlt1m &lt;- sum(final$Differential &lt; 0)\nprint(paste(\"Number of players with predicted values higher than market values:\", as.character(lt1m)))\n\n\n[1] \"Number of players with predicted values higher than market values: 153\"\n\n\nWe can see that over hald of the players in our dataset have a negative differential. This indicates that there are a handful of values above the predicted value line that skews the output of the regression. This would indicate some level of significance and accuracy in the model we’ve generated. If we adjust for these outliers, there’s a hint that we would be able to get greater accuracy from our model.\n\n\nCode\nsuppressMessages(library(ggbeeswarm))\nbubbledata1 &lt;- head(new_data |&gt; arrange(desc(`Market Value`)))\n#bubbledata\nggplot() +\n  geom_point(data = new_data, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), alpha=0.3) +\n  geom_point(data = bubbledata1, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), color=\"blue\") +\n  geom_text_repel(data = bubbledata1, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, label=Name)) +\n  labs(title=\"Football's Most Valuable Forwards\", subtitle=\"Haaland and Mbappe lead forwards, but Osimhen in the mix\", caption=\"Source: FBRef & TransferMarkt | By Sashwat Venkatesh\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nLooking at our first graph, which plots Non-Penalty Goals against Non-Penalty Expected Goals, scaling point size with market value, we can easily see who our 5 most valuable forwards in the world are.\nErling Haaland currently leads a Manchester City team looking to repeat their continental treble from the 2022-23 season, and broke the Premier League’s goalcsoring record last year. Kylian Mbappe, who has been considered by many the heir to the throne of world football, is valued highly as well, tracking with his 4 consecutive French League Golden Boots and back to back FIFA World Cup Final appearances. Victor Osimhen, the Nigerian striker who led Napoli to last year’s Serie A title (while picking up striker of the season) finds himself in a similar statistical category as Mbappe and Haaland, with a strong (&gt;1) npG/npxG ratio.\nRounding out the top six are three other top household-name forwards:\nLautaro Martinez, Inter Milan’s star frontman is on the verge of signing what is assuredly an extremely large contract extension to stay in Milan. Harry Kane and Randal Kolo Muani both completed big money transfers this summer, for 110,000,000 Euros to Bayern Munich and 95,000,000 Euros to Paris Saint-Germain, respectively. These three strikers find themselves in similar company, sharing a similar npG/npxG ratio. Interestingly, though, Martinez, Kane, and Kolo Muani all find themselves closer to the larger grouping of forwards in Europe, rather than the clear outliers that are Haaland, Osimhen, and Mbappe.\n\n\nCode\ndiff &lt;- head(final |&gt; arrange(desc(Differential)))\nggplot() + \n  geom_dumbbell(\n    data=diff, \n    aes(y=Name, x=`Market Value`, xend=`Predicted Value`),\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\", size=1) +\n  geom_text(\n    data = diff,\n    aes(\n      y = Name,\n      x = (`Market Value` + `Predicted Value`) / 2,  # Position text at the middle of the dumbbell\n      label = scales::comma(Differential, prefix = \"\\u20AC\")  # Show numerical difference as a label with 2 decimal places\n    ),\n    vjust = -1,  # Center labels vertically\n    size = 3  # Adjust label size as needed\n  ) + \n  theme_minimal() +\n  ylab(\"Forward\") +\n  xlab(\"Value\") +\n  labs(title=\"Forwards With Most Added Value\", subtitle=\"Market Values in Green, Predicted Values in Red\", caption=\"Source: FBRef & TransferMarkt | By Sashwat Venkatesh\")\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\nCode\nbubbledata2 &lt;- head(new_data |&gt; arrange(desc(`Differential`)))\n#bubbledata\nggplot() +\n  geom_point(data = new_data, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), alpha=0.3) +\n  geom_point(data = bubbledata2, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), color=\"red\") +\n  geom_text_repel(data = bubbledata2, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, label=Name)) +\n  labs(title=\"Which Forwards 'Add' The Most Value?\", subtitle=\"Haaland, Mbappe, and Osimhen lead forwards in added value\", caption=\"Source: FBRef & TransferMarkt | By Sashwat Venkatesh\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nLooking at forwards that have market values above their predicted value, we see that five of the top six most valuable forwards remain in the top six of the forwards with the most value above prediction. For players like Haaland, Mbappe, and Osimhen, who are talismanic goalscorers, this makes some amount of sense. The rate at which they score goals and almost carry their teams is far beyond any value that can be assigned, which is represented in the difference between market and predicted value.\nInterestingly, the six forwards present in this group have an average age of 25. In the transfer business, age and future potential (a remarkably hard thing to quantify) play an extremely pivotal role. It is unsprising that the new addition on this list, Dusan Vlahovic, is 23 years of age, indicating the power of future potential.\n\n\nCode\ndiff &lt;- head(final |&gt; arrange(Differential))\nggplot() + \n  geom_dumbbell(\n    data=diff, \n    aes(y=Name, x=`Market Value`, xend=`Predicted Value`),\n    color = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"red\", size=1) +\n  geom_text(\n    data = diff,\n    aes(\n      y = Name,\n      x = (`Market Value` + `Predicted Value`) / 2,  # Position text at the middle of the dumbbell\n      label = scales::comma(Differential, prefix = \"\\u20AC\")  # Show numerical difference as a label with 2 decimal places\n    ),\n    vjust = -1,  # Center labels vertically\n    size = 3  # Adjust label size as needed\n  ) + \n  theme_minimal() +\n  ylab(\"Forward\") +\n  xlab(\"Value\") +\n  labs(title=\"Forwards With Most Added Value\", subtitle=\"Market Values in Green, Predicted Values in Red\", caption=\"Source: FBRef & TransferMarkt | By Sashwat Venkatesh\")\n\n\n\n\n\n\n\nCode\nbubbledata3 &lt;- head(new_data |&gt; arrange(`Differential`))\n#bubbledata3\nggplot() +\n  geom_point(data = new_data, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), alpha=0.3) +\n  geom_point(data = bubbledata3, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, size=`Market Value`), color=\"green\") +\n  geom_text_repel(data = bubbledata3, aes(x=`Non-Penalty xG`, y=`Non-Penalty Goals`, label=Name)) +\n  labs(title=\"Which Forwards Are The Most 'Undervalued'?\", subtitle=\"Simeone, Saïd, and Undav among world's most underappreciated forwards\", caption=\"Source: FBRef & TransferMarkt | By Sashwat Venkatesh\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nConversely, looking at players who are significantly undervalued, we would expect to find players who are relatively unknown or don’t play a lot, but make an impact when they do play. It is therefore absolutely unsurprising that the top six in under-valuation are the opposite of the over-valuation’s top six. Giovanni Simeone, the model’s “most undervalued” forward in Europe, has played a total of 348 minutes this season, equating to less than 4 90s, and has scored twice. His average appearance is just under 21 minutes of playing time, so given more time, his performance at scale would show that he is a productive forward, comparing to the likes of Inter Milan pair Marcus Thuram and Lautaro Martinez.\nOf course, the age old saying is that no model is perfect. That saying definitely carries here. Is it easy to say that Erling Haaland isn’t actually worth 180,000,000 Euros? Absolutely. But is it easy to assign him a more accurate value? Absolutely not. Of note, when looking at the coefficients in a standardized setting, we can get an estimated parameter contribution to a forward’s valuation. In what was never a surprise, the statistics that contribute to almost two-thirds of a forward’s valuation are non-Penalty Goals, Assists, and non-penalty Expected Goals. Surprisingly, progressive carries had a strong contribution to the model, coming in around 12%\nIn conclusion, it’s easy to see that figuring out a better value for football’s forwards is a necessary task. There seem to be a wide variety of mis-priced forwards, and the market’s ever-increasing and inflated values make this task increasingly difficult, but with this start, perhaps there’s a more refined model to build and improve on from here.\nNotable under-valued players:\n\nKarim Benzema\nRobert Lewandowski\nThomas Muller\n\nNotable over-valued players:\n\nJoão Félix\nRasmus Højlund\nCody Gakpo"
  },
  {
    "objectID": "posts/2023-epa/index.html",
    "href": "posts/2023-epa/index.html",
    "title": "Does it Pay to be Red-Hot in the Redzone?",
    "section": "",
    "text": "Does it pay to be hot early on, or is it better to peak later in the season? Some 2022 NFL teams may give you different answers than others, but let’s see if there’s something bubbling under the sea of data we have available.\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(nflreadr))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\nsuppressMessages(library(ggalt))\n\n\n\n\nCode\nplays2022 &lt;- load_pbp(\n  seasons = c(2022)\n)\n\n\n\n\nCode\nplays2022 &lt;- plays2022 |&gt; filter(play_type == \"run\" | play_type == \"pass\")\n\n\nAfter loading in the data, we need to filter out kickoffs, field goals, etc. just so that we can get non-scoring and “non-procedural” plays, so all runs and passes.\n\n\nCode\nplays2022_3 &lt;- plays2022 |&gt; filter(week &lt;= 3) |&gt; filter(yardline_100 &lt;= 20)\nredzone2022_3 &lt;- plays2022_3 |&gt; group_by(posteam) |&gt; \n  summarise(`RZ Plays Through W3` = n(), \n            `Total EPA from RZ Plays Through W3` = sum(epa), \n            `EPA per RZ Play Through W3` = sum(epa)/n())\n\nhead(redzone2022_3 |&gt; arrange(desc(`EPA per RZ Play Through W3`)))\n\n\n# A tibble: 6 × 4\n  posteam `RZ Plays Through W3` Total EPA from RZ Plays…¹ EPA per RZ Play Thro…²\n  &lt;chr&gt;                   &lt;int&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;\n1 MIA                        20                      9.00                  0.450\n2 DET                        29                     11.7                   0.402\n3 TEN                        14                      5.62                  0.402\n4 BAL                        29                      9.91                  0.342\n5 CHI                        18                      4.16                  0.231\n6 DAL                        16                      3.41                  0.213\n# ℹ abbreviated names: ¹​`Total EPA from RZ Plays Through W3`,\n#   ²​`EPA per RZ Play Through W3`\n\n\nLooking at the 2022 data through 3 weeks, we notice some really interesting things. Despite having run just half the plays as the Detroit Lions, the Tennessee Titans were exactly on par from a EPA per Redzone play metric. Knowing what we know now, the Lions ended with a 9-8 record, and the Titans ended with a measly 7-10 record, with both groups missing the playoffs. Interestingly, the eventual 12-5 Dallas Cowboys were operating at less than half the level of the Dolphins, who would win 3 less games, so perhaps there is something to be said about peaking at the right times.\n\n\nCode\nplays2022_8 &lt;- plays2022 |&gt; filter(week &lt;= 8) |&gt; filter(yardline_100 &lt;= 20)\nredzone2022_8 &lt;- plays2022_8 |&gt; group_by(posteam) |&gt; \n  summarise(`RZ Plays Through W8` = n(), \n            `Total EPA from RZ Plays Through W8` = sum(epa),\n            `EPA per RZ Play Through W8` = sum(epa)/n())\n\nhead(redzone2022_8 |&gt; arrange(desc(`EPA per RZ Play Through W8`)))\n\n\n# A tibble: 6 × 4\n  posteam `RZ Plays Through W8` Total EPA from RZ Plays…¹ EPA per RZ Play Thro…²\n  &lt;chr&gt;                   &lt;int&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;\n1 TEN                        43                      16.8                  0.390\n2 KC                         97                      21.0                  0.216\n3 MIA                        61                      11.1                  0.181\n4 PHI                        79                      11.8                  0.149\n5 ATL                        78                      11.1                  0.142\n6 MIN                        78                      10.8                  0.138\n# ℹ abbreviated names: ¹​`Total EPA from RZ Plays Through W8`,\n#   ²​`EPA per RZ Play Through W8`\n\n\nMoving on 5 weeks later, our top 6 has shifted. The once #5 Chicago Bears are nowhere to be seen, and down the path to a dismal 3-14 record. Eventual Super Bowl Champions Kansas City join the fray, with the soon-to-be NFC champion Philadelphia Eagles also finding their way into the top 6. At the end of Week 8, 5 of our top 6 teams are teams that ended their 17 game slate with a record over .500, with two of those teams playing in the Super Bowl.\nClearly, to some extent, peaking at the right time and leading the league at the right time matters.\n\n\nCode\ncombined &lt;- merge(redzone2022_3, redzone2022_8 ,by=\"posteam\")\ncombined &lt;- combined |&gt; mutate(`Change from W3 to W8` = `EPA per RZ Play Through W8` - `EPA per RZ Play Through W3`)\n\n\n\n\nCode\nhead(combined |&gt; arrange(desc(`Change from W3 to W8`)) |&gt;\n  select(posteam, \"EPA per RZ Play Through W3\", \"EPA per RZ Play Through W8\", \"Change from W3 to W8\"))\n\n\n  posteam EPA per RZ Play Through W3 EPA per RZ Play Through W8\n1     MIN                 -0.3437532                0.137963044\n2     NYJ                 -0.4171309                0.006090288\n3     SEA                 -0.5494196               -0.181844085\n4      TB                 -0.5380498               -0.186703985\n5     LAC                 -0.3174684               -0.032288263\n6      GB                 -0.1867312                0.090250550\n  Change from W3 to W8\n1            0.4817162\n2            0.4232212\n3            0.3675755\n4            0.3513458\n5            0.2851801\n6            0.2769818\n\n\nIn the 2022 season, we can see that the Minnesota Vikings and the New York Jets were the two teams that experienced the biggest gains in EPA. Looking at their individual performances:\nThe Minnesota Vikings started 2-1, but improved to 6-1 at the end of week 8. The Vikings had their bye week in Week 7.\nThe New York Jets started 1-2, ekeing out a 31-30 win on the road against the Cleveland Browns and ended Week 8 with a 5-3 record. Unfortunately for the Jets, their fortune and productivity would soon run out, going 2-7 in the back half of the season. The Jets peaked as a 7-4 team, and then proceeded to not win a single game through all of December and January, crushing their hopes at a postseason berth.\n\n\nCode\nhead(combined |&gt; arrange((`Change from W3 to W8`)) |&gt;\n  select(posteam, \"EPA per RZ Play Through W3\", \"EPA per RZ Play Through W8\", \"Change from W3 to W8\"))\n\n\n  posteam EPA per RZ Play Through W3 EPA per RZ Play Through W8\n1     CHI                  0.2311495                -0.13791863\n2     DET                  0.4020577                 0.04728046\n3     WAS                  0.2111315                -0.11344078\n4     PIT                  0.1872190                -0.10186949\n5     BAL                  0.3417048                 0.05420067\n6     MIA                  0.4500259                 0.18138783\n  Change from W3 to W8\n1           -0.3690682\n2           -0.3547772\n3           -0.3245723\n4           -0.2890885\n5           -0.2875041\n6           -0.2686381\n\n\nOn the flip side, who are our biggest losers?\nThe Chicago Bears and the Detroit Lions, two teams in our Week 3 Top 6, find themselves with the horrible honor of being the biggest losers from Weeks 3 to 8.\nThe Bears made it to Week 3 with a 2-1 record, but then proceeded to win just ONE more game all season, going through the months of November, December, and January without a win. Understandably, their EPA per Redzone play tanks, and continues to tank over the course of 17 games.\nThe Lions, who started 1-2, looked almost CERTAIN for doom at the end of Week 8. After playing 7 games, they had a horrendous 1-6 record, with many chalking them up as tanking candidates. What followed was a series of heroics by the team to win 8 of the next 10 games, with a combined margin of loss of just 17 points. Unfortunately, it would be too little too late for the Lions, who ended 2nd in the NFC North and missed out on a playoff spot due to their head-to-head record against the Seattle Seahawks, who they lost to in a Week 4 shootout that ended 48-45. One field goal going the other way, and perhaps we’d be talking about the Lions in a completely different light.\n\n\nCode\nincrease &lt;- combined |&gt; filter(`EPA per RZ Play Through W3` &lt; `EPA per RZ Play Through W8`)\ndecrease &lt;- combined |&gt; filter(`EPA per RZ Play Through W3` &gt; `EPA per RZ Play Through W8`)\n\nggplot() + \n  geom_dumbbell(\n    data=increase, \n    aes(y=reorder(posteam, `EPA per RZ Play Through W8`), \n        x= `EPA per RZ Play Through W3`, xend=`EPA per RZ Play Through W8`),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\",\n    size=1\n  ) +\n  xlab(\"Expected Points Added per RZ Play\") +\n  ylab(\"Team\") +\n  labs(title=\"Minnesota, NY Jets Amongst Biggest Increases in EPA per RZ Play\", subtitle=\"18 of the NFL's teams saw an increase in EPA per RZ Play from 2022 Week 3 to Week 8\",\n       caption=\"NFL Data | By: Sashwat Venkatesh\")\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\nLooking at the graph of increases, even outside of Minnesota and the Jets, there are some other big gainers. The Seahawks and Tampa Bay both showed big strides, as well as the Broncos, who most would agree were the league’s biggest disappointment in 2022.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=decrease, \n    aes(y=reorder(posteam, `EPA per RZ Play Through W8`), \n        x= `EPA per RZ Play Through W3`, xend=`EPA per RZ Play Through W8`),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\",\n    size=1\n  ) +\n  xlab(\"Expected Points Added per RZ Play\") +\n  ylab(\"Team\") +\n  labs(title=\"Chicago, Detroit Amongst Biggest Decreases in EPA per RZ Play\", subtitle=\"14 of the NFL's teams saw an decrease in EPA per RZ Play from Week 3 to Week 8\",\n       caption=\"NFL Data | By: Sashwat Venkatesh\") +\n  scale_color_manual(name = \"\", values = c(\"red\", \"blue\") )\n\n\n\n\n\nLooking at our biggest losers gpaph, Miami is a striking regression down from their hot start. Pundits and talking heads were certain that after a 5-3 start that eventually became 8-3, the Dolphins were destined for something big come playoff time. However, those Dolphins continued their downward dive, lost 5 on the bounce, and bailed themselves out in Week 18 with an 11-6 win over the New York Jets. The data showed us that maybe the Dolphins weren’t destined for something great, but we have to take this with a grain of salt, considering the absolutely shambolic handling of Quarterback Tua Tagovailoa’s concussions.\nTo wrap things up, by week 8, or about 50% of the season, we can get a rough idea as to where teams will end up. Teams that start hot and regress may have some hope, but we can also definitely say that it’s not fair to write off teams that start slow. This data can only tell us, and show us so much, but without a doubt, there’s something to be said about being red-hot in the redzone."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/vb-aces/index.html",
    "href": "posts/vb-aces/index.html",
    "title": "Aces",
    "section": "",
    "text": "So far this season, Maryland’s 14-8 record has been anchored by strong defensive play, but have the Terps been able to convert their defense back into offense and put their opponent on the back foot?\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(ggbeeswarm))\nsuppressMessages(library(ggrepel))\nset.seed(1234)\n\nsuppressMessages(\n  data &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\") |&gt; filter(!is.na(aces), !is.na(pos))\n)\n\ndata &lt;- data |&gt; mutate(apm = aces/mp)\n\nsummary(data$apm)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.2917  0.4165  0.7143  2.4000 \n\n\nCode\naavg &lt;- data |&gt; filter(apm &gt;= 0.7143)\n\naavgteam &lt;- aavg |&gt; group_by(team) |&gt; summarise(instances = n())\n\numd &lt;- aavg |&gt; filter(team == \"Maryland Terrapins, Terps\")\n\nggplot() + \n  geom_quasirandom(data=aavg, aes(x=pos, y=apm), color=\"grey\") + \n  geom_quasirandom(data=umd, aes(x=pos, y=apm), color=\"red\") +\n  geom_text_repel(data=umd, aes(x=pos, y=apm, label=last_name)) +\n  labs(title=\"4 Terps Rank in Top 75% of Ace Providers\", caption=\"Source: NCAA Data | By Sashwat Venkatesh\")  + theme_minimal() +\n  xlab(\"Position\") +\n  ylab(\"Aces per Match\")\n\n\n\n\n\nAmongst 327 teams, the Terps roster 4 players who are better than the nation’s 75th percentile in Aces per match (~0.71). Of note, two of these players, Sam Csire and Lilly Gunter, contribute over 1 aces per match, indicating strong offensive performance when compared to the nation. With four players in the nation’s top ranks, the Terps are sure to be a group no one will take for granted come tournament time in December, should they qualify. For other teams, the Terps could play spoiler to those with major tournament hopes."
  },
  {
    "objectID": "posts/hello-world-intro/index.html",
    "href": "posts/hello-world-intro/index.html",
    "title": "Welcome to my blog!",
    "section": "",
    "text": "This is the best thing I’ve probably ever written. And that’s saying a lot."
  },
  {
    "objectID": "posts/what-makes-a-kevin-willard-team/index.html",
    "href": "posts/what-makes-a-kevin-willard-team/index.html",
    "title": "Title",
    "section": "",
    "text": "Code\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(formattable))\n\nsuppressWarnings(suppressMessages(bigdf &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1524.csv\")))\nsuppressMessages(sh &lt;- bigdf |&gt; filter(TeamFull == \"Seton Hall Pirates\") |&gt; filter(Date &lt; \"2022-07-01\"))\nsuppressMessages(md2 &lt;- bigdf |&gt; filter(TeamFull == \"Maryland Terrapins\") |&gt; filter(Date &gt; \"2022-07-02\"))\nsuppressMessages(md1 &lt;- bigdf |&gt; filter(TeamFull == \"Maryland Terrapins\") |&gt; filter(Date &lt; \"2022-07-02\"))\n\n\n\n\nCode\nt3 &lt;- md1 |&gt; group_by(Season) |&gt;summarise(\n  oppg = mean(OpponentScore),\n  stlg = mean(TeamSteals),\n  opptov = mean(OpponentTurnovers),\n  fta = mean(TeamFTA),\n  oppFTA = mean(OpponentFTA),\n  oppORBg = mean(OpponentOffRebounds)\n)\nformattable(t3, list(Season = color_bar(\"red\")))\n\n\nWarning in fun(as.numeric(x), ...): NAs introduced by coercion\n\n\n\n\n\n\n\nSeason\n\n\noppg\n\n\nstlg\n\n\nopptov\n\n\nfta\n\n\noppFTA\n\n\noppORBg\n\n\n\n\n\n\n2015-2016\n\n\n66.66667\n\n\n5.833333\n\n\n10.500000\n\n\n20.69444\n\n\n16.08333\n\n\n9.277778\n\n\n\n\n2016-2017\n\n\n68.06061\n\n\n5.454545\n\n\n12.333333\n\n\n22.18182\n\n\n18.96970\n\n\n9.848485\n\n\n\n\n2017-2018\n\n\n66.87500\n\n\n4.312500\n\n\n10.593750\n\n\n20.15625\n\n\n14.12500\n\n\n8.781250\n\n\n\n\n2018-2019\n\n\n65.52941\n\n\n4.352941\n\n\n9.088235\n\n\n18.44118\n\n\n15.70588\n\n\n7.970588\n\n\n\n\n2019-2020\n\n\n64.48387\n\n\n4.580645\n\n\n11.096774\n\n\n21.58065\n\n\n14.32258\n\n\n8.258065\n\n\n\n\n2020-2021\n\n\n65.61290\n\n\n5.000000\n\n\n10.483871\n\n\n17.35484\n\n\n14.45161\n\n\n8.354839\n\n\n\n\n2021-2022\n\n\n70.54839\n\n\n6.290323\n\n\n10.387097\n\n\n19.35484\n\n\n14.64516\n\n\n8.612903\n\n\n\n\n\n\n\n\n\nCode\nt1 &lt;- sh |&gt; group_by(Season) |&gt;summarise(\n  oppg = mean(OpponentScore),\n  stlg = mean(TeamSteals),\n  opptov = mean(OpponentTurnovers),\n  fta = mean(TeamFTA),\n  oppFTA = mean(OpponentFTA),\n  oppORBg = mean(OpponentOffRebounds)\n)\nformattable(t1, list(Season = color_bar(\"blue\")))\n\n\nWarning in fun(as.numeric(x), ...): NAs introduced by coercion\n\n\n\n\n\n\n\nSeason\n\n\noppg\n\n\nstlg\n\n\nopptov\n\n\nfta\n\n\noppFTA\n\n\noppORBg\n\n\n\n\n\n\n2014-2015\n\n\n67.96774\n\n\n5.967742\n\n\n11.67742\n\n\n21.41935\n\n\n21.38710\n\n\n10.290323\n\n\n\n\n2015-2016\n\n\n67.79412\n\n\n7.382353\n\n\n13.47059\n\n\n23.76471\n\n\n20.14706\n\n\n9.882353\n\n\n\n\n2016-2017\n\n\n70.39394\n\n\n6.909091\n\n\n11.84848\n\n\n22.21212\n\n\n20.51515\n\n\n7.424242\n\n\n\n\n2017-2018\n\n\n73.88235\n\n\n6.176471\n\n\n12.32353\n\n\n21.44118\n\n\n18.02941\n\n\n8.647059\n\n\n\n\n2018-2019\n\n\n71.85294\n\n\n6.911765\n\n\n13.44118\n\n\n20.50000\n\n\n19.05882\n\n\n8.411765\n\n\n\n\n2019-2020\n\n\n67.90000\n\n\n7.000000\n\n\n13.20000\n\n\n20.36667\n\n\n19.30000\n\n\n10.000000\n\n\n\n\n2020-2021\n\n\n69.66667\n\n\n6.296296\n\n\n12.25926\n\n\n20.14815\n\n\n15.92593\n\n\n8.444444\n\n\n\n\n2021-2022\n\n\n66.93103\n\n\n7.137931\n\n\n11.79310\n\n\n19.75862\n\n\n16.34483\n\n\n9.000000\n\n\n\n\n\n\n\n\n\nCode\nsuppressWarnings(t2 &lt;- md2 |&gt; group_by(Season) |&gt;summarise(\n  oppg = mean(OpponentScore),\n  stlg = mean(TeamSteals),\n  opptov = mean(OpponentTurnovers),\n  fta = mean(TeamFTA),\n  oppFTA = mean(OpponentFTA),\n  oppORBg = mean(OpponentOffRebounds)\n))\n\nsuppressWarnings(formattable(t2, list(Season = color_bar(\"red\"))))\n\n\nWarning in fun(as.numeric(x), ...): NAs introduced by coercion\n\n\n\n\n\n\n\nSeason\n\n\noppg\n\n\nstlg\n\n\nopptov\n\n\nfta\n\n\noppFTA\n\n\noppORBg\n\n\n\n\n\n\n2022-2023\n\n\n63.48571\n\n\n5.457143\n\n\n11.05714\n\n\n18.85714\n\n\n15.51429\n\n\n7.828571\n\n\n\n\n2023-2024\n\n\n61.00000\n\n\n7.333333\n\n\n13.33333\n\n\n22.00000\n\n\n18.66667\n\n\n9.000000\n\n\n\n\n\n\n\nAfter firing head coach Mark Turgeon during the 2021-22 season, the Maryland Terrapins completed the season under interim coach Danny Manning, and on March 21, 2022, the Terrapins announced the hiring of Seton Hall head coach Kevin Willard to lead the program. In his first season, Willard would lead the Terrapins to a 8-0 start, and end the season with a perfect home record, along with an NCAA tournament appearance.\nWith Willard’s hiring, Terrapin fans hoped that a change in identity after the school’s first losing season in nearly 30 years would be near. Mark Turgeon, otherwise sometimes known as “Turgeon the Surgeon” during his playing days for his ability to “carve up” defenses as a player, brought this offensive mindset to his coaching philosophy. In his time leading the Terrapins, Turgeon was known for high-flying offenses.\nKevin Willard’s Seton Hall teams, statistically, were solid defensively, taking the pressure off their offense. This defensive focus has made it to College Park, as we can see in the two above tables displaying Willard’s coaching history.\nLooking at defensive statistics, we can see that in 2022-23, the Terrapins did adopt Willard’s defensive mentality, lowering their points allowed per game,"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "TESTING TESTING TESTING"
  },
  {
    "objectID": "posts/maryland-ypp/index.html",
    "href": "posts/maryland-ypp/index.html",
    "title": "Mirror Mirror on the Wall, Who’s the Best Maryland of Them All?",
    "section": "",
    "text": "When Maryland signed Michael Locksley to be their head coach in December of 2018, the fanbase was desperate for improvements across the board. The Terrapins had amassed just 38 wins over the previous 6 years, with just 5 in 2018. Has the former Alabama Offensive Coordinator truly jumped Maryland into greener pastures?\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(lubridate))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\nsuppressMessages(data &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1123.csv\"))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nCode\nmaryland &lt;- data |&gt; filter(TeamFull == \"Maryland Terrapins\")\nmaryland &lt;- maryland |&gt; \n  mutate(totalYds = maryland$PassingYds + maryland$RushingYds, \n         defTotalYds = maryland$DefPassingYds + maryland$DefRushingYds\n         )\n\nmaryland$Result[grepl(\"W\", maryland$Result)] &lt;- 1\nmaryland$Result[grepl(\"L\", maryland$Result)] &lt;- 0\nmaryland$Result &lt;- as.integer(maryland$Result)\n\nmarylandByYear &lt;- maryland |&gt; \n  group_by(year(Date)) |&gt; \n  summarise(avgOffYds = sum(totalYds)/sum(OffensivePlays), avgDefYds = sum(defTotalYds)/sum(DefPlays), wins = sum(Result))\n\navgs &lt;- marylandByYear |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(avgOffYds), \n    defense = mean(avgDefYds)\n    )\n\nggplot() + \n  geom_point(\n    data=marylandByYear, aes(x=avgOffYds, y=avgDefYds, size=wins, color=\"red\")\n    ) +\n  geom_vline(xintercept = avgs$offense) +\n  geom_hline(yintercept = avgs$defense) +\n  geom_text_repel(data=marylandByYear, aes(x=avgOffYds, y=avgDefYds, label=`year(Date)`)) +\n  labs(title=\"A Shift To Offense Since Locksley's Inception\", subtitle=\"4 of Locksley's 5 seasons leading the Terps have seen above average offensive production\" , caption=\"Source: NCAA Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n\n\n\n\nFrom the data, we can clearly show that Michael Locksley has kickstarted a new era of Terrapins Football. Since he took over as head coach in 2019, in every season since and including 2020, Maryland’s average offensive yards per play has been above program average since 2011, 3 of those 4 years have seen lower than program average yards allowed per play while on defense.\nLocksley’s tenure has also seen 25 wins thus far, with a rocky start in 2019 and 2020, earning just 5 wins across the two years. However, since 21, the program has won 20 games, including 2 bowl victories. So, safe to say, while there was a bumpy start, Maryland has “Locked In”."
  },
  {
    "objectID": "posts/b1g-plays/index.html",
    "href": "posts/b1g-plays/index.html",
    "title": "Less is More? Big Ten Teams Run Less Plays, But Powerhouses Remain Unaffected",
    "section": "",
    "text": "The NCAA’s new clock rules in football were implemented with a view to shorten games and make the viewer experience more palatable. Have they done that? Let’s take a look within the context of the Big Ten:\n\n\nCode\nsuppressMessages(library(tidyverse))\n\n\n\n\nCode\nsuppressMessages(games2022 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs22.csv\"))\nsuppressMessages(games2023 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\"))\n\nbig10 &lt;- c(\"Maryland Terrapins\", \"Illinois Fightning Illini\", \"Wisconsin Badgers\", \"Michigan State Spartans\", \"Michigan Wolverines\", \"Indiana Hoosiers\", \"Ohio State Buckeyes\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Nebraska Cornhuskers\", \"Northwestern Wildcats\", \"Purdue Boilermakers\")\n\nb10_games2022 &lt;- games2022 |&gt; filter(TeamFull %in% big10)\nb10_games2023 &lt;- games2023 |&gt; filter(TeamFull %in% big10)\n\ngames2022_playsPerGame &lt;- b10_games2022 |&gt; group_by(TeamFull) |&gt; summarize(avgOffPlays = sum(OffensivePlays)/n())\ngames2023_playsPerGame &lt;- b10_games2023 |&gt; group_by(TeamFull) |&gt; summarize(avgOffPlays = sum(OffensivePlays)/n())\n\ngames2022_playsPerGame &lt;- games2022_playsPerGame |&gt; arrange(desc(avgOffPlays))\n\nggplot() + \n  geom_bar(\n    data=games2022_playsPerGame, \n    aes(x=TeamFull, weight=avgOffPlays)\n  ) +\n  ylab(\"Offensive Plays Per Game\") +\n  xlab(\"Team\") +\n  ggtitle(\"2022 Purdue On Top, but Barely\")+\n  coord_flip() + \n  scale_x_discrete(limits = games2022_playsPerGame$TeamFull[order(games2022_playsPerGame$avgOffPlays)])\n\n\n\n\n\nLooking at the Big Ten teams in 2022, we can see that the perennial Big Ten powerhouses, like Ohio State and Penn State, weren’t necessarily the ones running the most offensive plays. The bar chart we’ve generated here indicates that Northwestern and Purdue, teams that aren’t known for “running” the Big ten like OSU and Penn State are, might suffer from some sort of offensive inefficiency.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=games2023_playsPerGame, \n    aes(x=TeamFull, weight=avgOffPlays)\n  ) +\n  ylab(\"Offensive Plays Per Game\") +\n  xlab(\"Team\") +\n  ggtitle(\"Penn State Surges Ahead This Year\")+\n  coord_flip() +\n  scale_x_discrete(limits = games2023_playsPerGame$TeamFull[order(games2023_playsPerGame$avgOffPlays)])\n\n\n\n\n\nOnce again, in 2023, Purdue is amongst the top teams in terms of Offensive Plays run per game, and sit at a measly 2-4 on the season.\n\n\nCode\ndifferentials &lt;- data.frame(\n  Team = games2022_playsPerGame$TeamFull,\n  playsPerGame2023 = games2023_playsPerGame$avgOffPlays,\n  playsPerGame2022 = games2022_playsPerGame$avgOffPlays\n)\ndifferentials &lt;- differentials |&gt; mutate(Differential = differentials$playsPerGame2023 - differentials$playsPerGame2022)\n\ndifferentials |&gt; arrange(desc(Differential))\n\n\n                       Team playsPerGame2023 playsPerGame2022 Differential\n1         Wisconsin Badgers         80.60000         63.61538   16.9846154\n2             Iowa Hawkeyes         71.40000         59.38462   12.0153846\n3   Rutgers Scarlet Knights         73.00000         63.50000    9.5000000\n4  Minnesota Golden Gophers         66.50000         66.30769    0.1923077\n5      Nebraska Cornhuskers         62.16667         63.41667   -1.2500000\n6   Michigan State Spartans         62.80000         64.41667   -1.6166667\n7        Maryland Terrapins         67.60000         70.38462   -2.7846154\n8          Indiana Hoosiers         68.33333         73.25000   -4.9166667\n9       Ohio State Buckeyes         62.00000         67.38462   -5.3846154\n10      Michigan Wolverines         63.66667         69.28571   -5.6190476\n11      Purdue Boilermakers         66.40000         74.92857   -8.5285714\n12 Penn State Nittany Lions         59.66667         70.07692  -10.4102564\n13    Northwestern Wildcats         55.50000         73.83333  -18.3333333\n\n\nLooking at the differentials between seasons, the new clock rule intended to shorten games seems to be doing just that – in the Big Ten at least. Of the Big Ten’s teams, just 3 have logged an increased in an average number of plays run per game. Those teams, Penn State, Wisconsin, and Michigan State, are 5-0, 4-1, and 2-3, respectively, indicating that there’s something missing here. What are Penn State and Wisconsin doing differently to only have one loss between them?\n(The Badgers’ one loss was to #19 Washington State by 9 points, a result of falling behind early on in what was otherwise an even matchup on paper)"
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Method Behind the Madness? A Deep Dive into Maryland’s Playcalling Mindset",
    "section": "",
    "text": "Late in their Homecoming game on Saturday, October 14th, the Maryland Terrapins seemed poised to win what was already an overcomplicated affair. A team that was 5-1, against a struggling 2-4 conference rival, with Maryland looking to build back some confidence and momentum after a 20 point loss in Columbus against Ohio State.\nOn an incredibly pivotal 3rd down and 6, a scenario that every football team has faced in some situation or another, Maryland made the extremely bold call to… run the ball. The play resulted in a 1 yard loss, and set up what would be a last-play winning drive for the visiting Illinois squad.\nIs there a method behind what some are calling Locksley’s madness? Let’s take a look at a number of plays in 3rd and 6 situations from the last 4+ years’ worth of FBS plays, and see if there’s something we can figure out.\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(cfbfastR))\n\npbp &lt;- load_cfb_pbp(seasons = c(2019, 2020, 2021, 2022, 2023))\n\n\n\n\nCode\nlibrary(ggplot2)\nthreeandsix &lt;- pbp |&gt; filter(down == 3) |&gt; filter(distance == 6)\nthreeandsixruns &lt;- threeandsix |&gt; filter(play_type == \"Rush\")\nplaytypes &lt;- threeandsix |&gt; group_by(play_type) |&gt; summarise(\n  instances = n()\n) |&gt; arrange(desc(instances))\n\n\nBelow, we can see the distribution of play outcomes for all plays run on 3rd Down with 6 yards to go:\n\n\nCode\nplaytypes\n\n\n# A tibble: 19 × 2\n   play_type                            instances\n   &lt;chr&gt;                                    &lt;int&gt;\n 1 Pass Reception                            3484\n 2 Pass Incompletion                         2859\n 3 Rush                                      2359\n 4 Penalty                                    813\n 5 Timeout                                    674\n 6 Sack                                       613\n 7 Passing Touchdown                          383\n 8 Interception Return                        182\n 9 Rushing Touchdown                          100\n10 Fumble Recovery (Opponent)                  83\n11 Fumble Recovery (Own)                       55\n12 Interception Return Touchdown               24\n13 Field Goal Good                             13\n14 Field Goal Missed                            3\n15 Fumble Return Touchdown                      3\n16 Punt                                         3\n17 Safety                                       2\n18 Blocked Field Goal                           1\n19 Fumble Recovery (Opponent) Touchdown         1\n\n\nVery clearly, the overwhelming choice for offenses on 3rd and 6 is to pass the ball, with over half of all plays in this scenario being a pass, since 2019. For the purposes of this investigation, we’re taking plays in isolation. For example, interceptions are not counted as Pass Incompletions, and fumbles after a rush or pass completion are counted as fumbles, not as both a Rush/Pass Reception AND fumble. With this knowledge in mind, let’s move forward, and understand how many of these runs are actually successful in achieving a new set of downs.\n\n\nCode\nsuccessRuns &lt;- threeandsixruns |&gt; filter(yards_gained &gt;= 6)\nsuccessRuns &lt;- successRuns |&gt; group_by(play_type) |&gt; summarise(instances=n())\nsuccessRuns\n\n\n# A tibble: 1 × 2\n  play_type instances\n  &lt;chr&gt;         &lt;int&gt;\n1 Rush            871\n\n\nSo then, out of 2,459 rushes run on 3rd and 6 in the last 4-and-change years in college football, just 971, or 39.5% of them, gain 6 or more than 6 yards.\nNOTE: The above calculation comes from 871 runs that gained 6 or more yards but did not score a touchdown, as well as 100 runs on 3rd and 6, which, logically, implies that they gained at least 6 yards.\nSo running on 3rd and 6 doesn’t actually seem like the worst play in the world, as over 40% of those attempts actually end up getting the job (or more!) done.\nSo who are our most frequent users (or abusers?) of this play?\n\n\nCode\nthreeandsixrunTeams &lt;- threeandsixruns |&gt; group_by(pos_team) |&gt; summarise(instances = n()) |&gt; arrange(desc(instances))\nthreeandsixrunTeams\n\n\n# A tibble: 261 × 2\n   pos_team         instances\n   &lt;chr&gt;                &lt;int&gt;\n 1 Navy                    49\n 2 Army                    42\n 3 Air Force               30\n 4 Georgia Southern        28\n 5 Baylor                  25\n 6 Oklahoma State          24\n 7 Kent State              23\n 8 Louisiana               23\n 9 New Mexico              23\n10 Arkansas                22\n# ℹ 251 more rows\n\n\nUnsurprisingly, we see that the three service academies are the top 3 teams who choose to run on 3rd and 6. This tracks with the “eye test” that those 3 teams are VERY run heavy. Maryland, since 2019, sits at 40th place out of 331 tracked FBS teams, which is still significantly above the average, which maybe starts to point us towards the fact that this isn’t out of the ordinary for Maryland\n\n\nCode\nthreeandsixUMD &lt;- threeandsix |&gt; group_by(pos_team, play_type) |&gt; summarise(instances = n()) |&gt; filter(pos_team == \"Maryland\")\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nthreeandsixUMD\n\n\n# A tibble: 10 × 3\n# Groups:   pos_team [1]\n   pos_team play_type                  instances\n   &lt;chr&gt;    &lt;chr&gt;                          &lt;int&gt;\n 1 Maryland Fumble Recovery (Opponent)         2\n 2 Maryland Interception Return                1\n 3 Maryland Pass Incompletion                 11\n 4 Maryland Pass Reception                    13\n 5 Maryland Passing Touchdown                  4\n 6 Maryland Penalty                            2\n 7 Maryland Rush                              15\n 8 Maryland Rushing Touchdown                  1\n 9 Maryland Sack                               4\n10 Maryland Timeout                            2\n\n\nSpecifically looking at Maryland’s 3rd and 6 data, it’s easy to see that this is more of a surprise in THIS context. Maryland has 29 passing plays as compared to 16 rush plays, a 65-35 split in play calls for this down and distance situation.\nSo what was the logic going into this play call?\n\n\nCode\ntemp1 &lt;- threeandsix |&gt; \n  filter(year==2023) |&gt; \n  group_by(def_pos_team, play_type) |&gt;\n  filter(yards_gained &gt;= 6) |&gt;\n  summarise(instances = n())\n\n\n`summarise()` has grouped output by 'def_pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nfinal1 &lt;- temp1 |&gt; \n  group_by(def_pos_team) |&gt; \n  summarise(conversionsAllowed = sum(instances)) |&gt; \n  arrange(desc(conversionsAllowed))\n\nfinal1\n\n\n# A tibble: 241 × 2\n   def_pos_team  conversionsAllowed\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Texas State                    8\n 2 Cal Poly                       7\n 3 Kent State                     7\n 4 South Florida                  7\n 5 Wyoming                        7\n 6 Alabama                        6\n 7 Baylor                         6\n 8 Florida State                  6\n 9 Illinois                       6\n10 Northern Iowa                  6\n# ℹ 231 more rows\n\n\n\n\nCode\ntemp2 &lt;- threeandsixruns |&gt; \n  filter(year==2023) |&gt; \n  group_by(def_pos_team, play_type) |&gt;\n  filter(yards_gained &gt;= 6) |&gt;\n  summarise(instances = n())\n\n\n`summarise()` has grouped output by 'def_pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nfinal2 &lt;- temp2 |&gt; \n  group_by(def_pos_team) |&gt; \n  summarise(conversionsAllowedFromRun = sum(instances)) |&gt; \n  arrange(desc(conversionsAllowedFromRun))\n\nfinal2\n\n\n# A tibble: 101 × 2\n   def_pos_team  conversionsAllowedFromRun\n   &lt;chr&gt;                             &lt;int&gt;\n 1 Alabama                               4\n 2 Cal Poly                              3\n 3 Illinois                              3\n 4 Texas State                           3\n 5 Virginia Tech                         3\n 6 Akron                                 2\n 7 Baylor                                2\n 8 Bucknell                              2\n 9 Duquesne                              2\n10 Idaho                                 2\n# ℹ 91 more rows\n\n\nHere’s the logic at hand, or at least my best guess, given the data we have:\nSo far in 2023, as seen in the table above, the Illini defense has faced 3rd and 6 a total of six times. Of those 6 times, 50% of successful conversions they’ve allowed have come on the ground, via runs.\nDoes this justify what the average fan might call a “boneheaded” or “stupid” play? Perhaps not. At the very least, however, it provides us with a base on which we can make an educated guess to the question: “Why did Locksley run in THAT situation?”"
  },
  {
    "objectID": "posts/running-on-empty/index.html",
    "href": "posts/running-on-empty/index.html",
    "title": "No Steps Forward, But Many Steps Backwards",
    "section": "",
    "text": "Code\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(scales))\nsuppressMessages(library(formattable))\nsuppressMessages(logs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs23.csv\"))\n\n\n\n\nCode\nb1g &lt;- c(\"Maryland Terrapins\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Nebraska Cornhuskers\",\n         \"Indiana Hoosiers\", \"Ohio State Buckeyes\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\",\n         \"Illinois Fighting Illini\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Northwestern Wildcats\",\n         \"Purdue Boilermakers\", \"Wisconsin Badgers\")\nrunningLogs &lt;- logs |&gt; select(TeamFull, Opponent, Date, Game, RushingYds, RushingAtt, Result)\nrunningLogs &lt;- runningLogs |&gt; mutate(YPC = RushingYds/RushingAtt)\nb1gRunning &lt;- runningLogs |&gt; filter(TeamFull %in% b1g)\n\ntemp &lt;- b1gRunning |&gt; summarise(sum(RushingYds)/sum(RushingAtt))\n\n#b1gRunningAveragers &lt;- b1gRunning |&gt; \n#  group_by(TeamFull) |&gt; \n#  summarise(games = n(), totalRushYds = sum(RushingYds), totalRush = sum(RushingAtt), \n#            YPC = sum(RushingYds)/sum(RushingAtt))\n\n\nBefore Maryland’s Saturday showdown against Penn State, many Terrapin fans already had the outcome in their minds: an impending domination by the Nittany Lions in College Park. What followed, by most accounts, was somehow worse than the worst case scenario. Despite the 43W-2L-1T record Penn State holds against the Terrapins, the 15-51 loss the Terrapins suffered was plagued by stagnant offense, and a game from the defense that looked like a group of spectators had been picked from the stands to play against Penn State.\n\n\nCode\nggplot() + \n  geom_hline(yintercept=3.934071, color=\"blue\") +\n  geom_hline(yintercept=0.000000, color=\"red\") +\n  geom_line(data=b1gRunning, aes(x=Game, y=YPC, group=TeamFull)) + \n  scale_y_continuous(limits = c(-3.5, 8)) +\n  scale_x_continuous(limits = c(1, 9), breaks = pretty_breaks()) +\n  facet_wrap(~TeamFull) +\n  ylab(\"Yards per Carry\") +\n  labs(title=\"A Nightmare Showing from the Terps\", subtitle = \"Terrapins become the first B1G team to average negative rushing yards per carry in 2023\", caption = \"NCAA Data | Created By Sashwat Venkatesh\") + \n  theme_minimal()\n\n\n\n\n\nOn Saturday night, as fans slowly filtered out of SECU Stadium, the Terrapins became the first Big Ten team to achieve a rather dubious statline: They averaged -3.2 yards per rushing attempt, the first game this season where a Big Ten team averaged less than ZERO yards per attempt. This is by and far the worst running game performance from a squad this season, with the next worst performance coming from Iowa’s October 21st matchup against Minnesota, where the Hawkeyes averaged 0.4 yards per attempt.\nAcross the ~600 Division 1 college football games played this season, just SIX have ended with a team in negative rushing yards. Unfortunately, not being the only team in the nation doesn’t save Maryland here:\n\n\nCode\ndf &lt;- runningLogs |&gt; filter(RushingYds &lt; 0 ) |&gt; select(TeamFull, Opponent, RushingYds, YPC, Result) |&gt; arrange(YPC)\nformattable(df, list(YPC = color_bar(\"#FF7276\")))\n\n\n\n\n\n\n\nTeamFull\n\n\nOpponent\n\n\nRushingYds\n\n\nYPC\n\n\nResult\n\n\n\n\n\n\nMaryland Terrapins\n\n\nPenn State\n\n\n-51\n\n\n-3.18750000\n\n\nL (15-51)\n\n\n\n\nTroy Trojans\n\n\nJames Madison\n\n\n-12\n\n\n-0.63157895\n\n\nL (14-16)\n\n\n\n\nColorado Buffaloes\n\n\nOregon State\n\n\n-7\n\n\n-0.36842105\n\n\nL (19-26)\n\n\n\n\nHawaii Rainbow Warriors\n\n\nStanford\n\n\n-5\n\n\n-0.31250000\n\n\nL (24-37)\n\n\n\n\nMarshall Thundering Herd\n\n\nJames Madison\n\n\n-4\n\n\n-0.12500000\n\n\nL (9-20)\n\n\n\n\nSouth Carolina Gamecocks\n\n\nNorth Carolina\n\n\n-2\n\n\n-0.06451613\n\n\nL (17-31)\n\n\n\n\n\n\n\nOf the 6 teams that have suffered a similar fate, the Terrapins, in their game, had the most lost rushing yards (-51), the worst margin of loss (-36), as well as the lowest yards per carry.\nIt’s safe to say that for a team that’s been sitting at 5 wins since September 30 and has now lost 4 straight, getting that elusive 6th and bowl eligibility earning win will be no easy feat. The Terrapins remaining schedule sees them playing @Nebraska, another 5-4 team looking to find their footing and 6th win, followed by a now 9-0 Michigan Wolverines team who will surely be in the discussions for the College Football Playoff, before ending the the season in Piscataway playing at Rutgers, who have already clinched their 6th win.\nTo the powers that be at Maryland Football’s coaching and playcalling staff, I humbly submit the following:\nDominating the run game isn’t always sure shot to winning football games, but averaging more than 0 yards per rushing attempt might just be a good first step in getting there."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Between the Points",
    "section": "",
    "text": "For Players, Scoring Matters. But Shouldn’t Other Things Too?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 11, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nWelcome Willard: A New Terrapin Identity\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nNo Steps Forward, But Many Steps Backwards\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nDoes it Pay to be Red-Hot in the Redzone?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nAces\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nMirror Mirror on the Wall, Who’s the Best Maryland of Them All?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nMethod Behind the Madness? A Deep Dive into Maryland’s Playcalling Mindset\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nLess is More? Big Ten Teams Run Less Plays, But Powerhouses Remain Unaffected\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to my blog!\n\n\n\n\n\n\n\nwelcome\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]