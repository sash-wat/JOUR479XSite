[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/soccers-biggest-steals-and-scams/index.html",
    "href": "posts/soccers-biggest-steals-and-scams/index.html",
    "title": "Soccer’s Biggest Steals and Scams: An Analysis of Transfer Business in Soccer Transfer Markets",
    "section": "",
    "text": "Transfer business has become an absolutely integral part of any soccer club’s plans to contend for titles at a domestic, regional, or international level. In this analysis, I’ve delved into the most expensive transfers of all time, seeing if some big name players really warranted their transfers prices based on accepted market valuations, and officially listed fees, and seeing if there has ever been arbitrage in the player transfer market - a situation where a player was severely undervalued for what they produced.\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(lubridate))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\n\nsuppressMessages(clubs &lt;- read_csv(\"~/Desktop/TransferMarkt Data/clubs.csv\"))\nsuppressMessages(players &lt;- read_csv(\"~/Desktop/TransferMarkt Data/players.csv\"))\nsuppressMessages(player_valuations&lt;- read_csv(\"~/Desktop/TransferMarkt Data/player_valuations.csv\"))\nsuppressMessages(games &lt;- read_csv(\"~/Desktop/TransferMarkt Data/games.csv\"))\nsuppressMessages(game_events &lt;- read_csv(\"~/Desktop/TransferMarkt Data/game_events.csv\"))\nsuppressMessages(comps &lt;- read_csv(\"~/Desktop/TransferMarkt Data/competitions.csv\"))\nsuppressMessages(club_games &lt;- read_csv(\"~/Desktop/TransferMarkt Data/club_games.csv\"))\nsuppressMessages(appearances &lt;- read_csv(\"~/Desktop/TransferMarkt Data/appearances.csv\"))\n\n\nFrom TransferMarkt, an online aggregator of statistics and valuations, we’ve gathered data on clubs, players, the valuations of players, EVERY game played, and the events within that game, such as bookings, goals, and substitutions, along with details on competitions around the world, games played by clubs, and individual player appearances.\nThis wide spread of data allows us to do a lot of analysis, which individuals across the internet have applied their data analytics skills to.\nNOTE: The data was pulled from https://www.kaggle.com/datasets/davidcariboo/player-scores/data, which is a Kaggle repository that self-updates every week following the conclusion of matchweeks. My version of the data is from the first week of October. The aforementioned data analysis projects can be found in the “Code” tab at the Kaggle link provided.\n\n\nCode\nplayer_stats &lt;-function(name, year) {\n\ndf &lt;- merge(appearances, games, by=\"game_id\", all.x=TRUE)\n\ndf$goals_for &lt;- ifelse(df$home_club_id == df$player_club_id, df$home_club_goals,\n                           ifelse(df$away_club_id == df$player_club_id, df$away_club_goals, NA))\n\ndf$goals_against &lt;- ifelse(df$home_club_id == df$player_club_id, df$away_club_goals,\n                               ifelse(df$away_club_id == df$player_club_id, df$home_club_goals, NA))\n    df$clean_sheet &lt;- ifelse(df$goals_against == 0, 1,\n                            ifelse(df$goals_against &gt; 0, 0, NA))\n    \nif (year == \"all\") {\n  df &lt;- df |&gt; group_by(player_id, player_name, season) |&gt; \n  summarise(\n    g = sum(goals),\n    a = sum(assists),\n    cs = sum(clean_sheet),\n    yc = sum(yellow_cards),\n    rc = sum(red_cards),\n    app = n()\n  ) |&gt; filter(player_name == name)\n}\nelse {\n  df &lt;- df |&gt; group_by(player_id, player_name, season) |&gt; \n  summarise(\n    g = sum(goals),\n    a = sum(assists),\n    cs = sum(clean_sheet),\n    app = n()\n  ) |&gt; filter(player_name == name) |&gt; filter(season == year)\n}\ndf\n}\n\n\nUsing the data, we’re actually able to extract players’ season by season data, finding out how many goals, assists, clean sheets, and any other values we want per season. I’ve limited this to the key statistics, which include goals, assists, clean sheets, yellow cards, red cards, and appearances.\n\n\nCode\nsuppressMessages(head(player_stats(\"Lionel Messi\", \"all\")))\n\n\n# A tibble: 6 × 9\n# Groups:   player_id, player_name [1]\n  player_id player_name  season     g     a    cs    yc    rc   app\n      &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1     28003 Lionel Messi   2012    60    17    11     2     0    50\n2     28003 Lionel Messi   2013    41    14    19     3     0    46\n3     28003 Lionel Messi   2014    58    31    31     6     0    57\n4     28003 Lionel Messi   2015    41    24    21     5     0    49\n5     28003 Lionel Messi   2016    54    20    19     9     0    52\n6     28003 Lionel Messi   2017    45    20    29     7     0    54\n\n\n\n\nCode\nget_pid &lt;- function(player) {\n  pRow &lt;- players |&gt; filter(name == player)\n  pRow$player_id\n}\n\nvaluation_history &lt;- function(player) {\n  temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\nggplot() +\n  geom_line(data = temp, aes(x=temp$date, y=temp$market_value_in_eur))\n}\n\ngoalsGraph &lt;- function(player) {\n  tryCatch(\n    {\n      temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\ntemp2 &lt;- player_stats(player, \"all\")\n\nt &lt;- list()\nu &lt;- list()\nv &lt;- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t &lt;- append(t, temp2[row1, \"g\"])\n      u &lt;- append(u, temp[row2, \"market_value_in_eur\"])\n      v &lt;- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf &lt;- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"Goals\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. Goals Scored\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n  \n  }\n\n\n\n\nCode\nvalueGraph &lt;- function(player) {\n      temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\nggplot() +\n  geom_line(data=temp, aes(x=year, y=market_value_in_eur)) + \n  ylab(\"Market Value, Euros\") +\n  xlab(\"Season\") +\n  labs(title=paste(player, \"Market Value by Season\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")\n  \n  }\n\n\n\n\nCode\nsuppressMessages(goalsGraph(\"Lionel Messi\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Lionel Messi\"))\n\n\n\n\n\nLooking at the values for Lionel Messi, we can call out a few things: First, his high scoring seasons seem to tilt the regression upwards, and since there are a lot of them, there may really be a “greatest of all time” tax. We can also resoanably state that Messi is probably past his peak on account of two factors.\nPrimarily, his goals production year-over-year has been decreasing, and his market valuations have been on a similar downturn since 2019. The end is likely(?) year for the 36 year old, who won his record-breaking 8th Ballon D’Or on Monday night.\n\n\nCode\nsuppressMessages(goalsGraph(\"Neymar\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Neymar\"))\n\n\n\n\n\nLooking at the pair of graphs tracking Neymar’s progress above, a couple of interesting points present themselves. It seems as though Neymar’s market value seems relatively untouched or unaffected by his statistical performance, in terms of goals. Neymar’s often been injured, and his impact has been minimized for this reason, but when he’s on the pitch, what he does in undoubted. This specific case shows us the power of narratives - that is, how much a player’s intangibles or uncountable statistics really contribute to their value. Most would tell you that Neymar is the epitome of this category, and it’s safe to say that crowd is probably right.\n\n\nCode\nsuppressMessages(goalsGraph(\"Kylian Mbappé\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Kylian Mbappé\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraph(\"Antoine Griezmann\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Antoine Griezmann\"))\n\n\n\n\n\n\n\nCode\ngoalsGraphGA &lt;- function(player) {\n  tryCatch(\n    {\n      temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\ntemp2 &lt;- player_stats(player, \"all\")\n\nt &lt;- list()\nu &lt;- list()\nv &lt;- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t &lt;- append(t, temp2[row1, \"g\"] + temp2[row1, \"a\"])\n      u &lt;- append(u, temp[row2, \"market_value_in_eur\"])\n      v &lt;- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf &lt;- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"G+A\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. G+A\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n  \n  }\n\n\n\n\nCode\nsuppressMessages(goalsGraphGA(\"Philippe Coutinho\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Philippe Coutinho\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphGA(\"Jack Grealish\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Jack Grealish\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphGA(\"Declan Rice\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Declan Rice\"))\n\n\n\n\n\n\n\nCode\ngoalsGraphDef &lt;- function(player) {\n  tryCatch(\n    {\n      temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\ntemp2 &lt;- player_stats(player, \"all\")\n\nt &lt;- list()\nu &lt;- list()\nv &lt;- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t &lt;- append(t, temp2[row1, \"cs\"])\n      u &lt;- append(u, temp[row2, \"market_value_in_eur\"])\n      v &lt;- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf &lt;- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"Clean Sheets\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. Clean Sheets\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n}\n\n\n\n\nCode\nsuppressMessages(goalsGraphDef(\"Harry Maguire\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Harry Maguire\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphDef(\"Matthijs de Ligt\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Matthijs de Ligt\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphDef(\"Lucas Hernández\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Lucas Hernández\"))\n\n\n\n\n\n\n\nCode\ngoalsGraphGK &lt;- function(player) {\n  tryCatch(\n    {\n      temp &lt;- player_valuations |&gt; \n  filter(player_id == get_pid(player)) |&gt; filter(format(date, \"%m\") == \"05\" | format(date, \"%m\") == \"06\" | format(date, \"%m\") == \"07\" | format(date, \"%m\") == \"08\") |&gt; \n  arrange(date)\n\ntemp &lt;- temp |&gt;\n  mutate(year = lubridate::year(date)) |&gt;  # Create a new column with the year\n  group_by(year) |&gt;\n  filter(date == max(date)) |&gt;\n  select(-year)\n\ntemp2 &lt;- player_stats(player, \"all\")\n\nt &lt;- list()\nu &lt;- list()\nv &lt;- list()\n\nfor (row1 in 1:nrow(temp2)) {\n  for (row2 in 1:nrow(temp)) {\n    if (temp[row2, \"year\"] == temp2[row1, \"season\"] + 1) {\n      t &lt;- append(t, temp2[row1, \"cs\"])\n      u &lt;- append(u, temp[row2, \"market_value_in_eur\"])\n      v &lt;- append(v, temp[row2, \"year\"])\n    }\n  }\n  \n}\n\ndf &lt;- data.frame(goals = unlist(t), value=unlist(u), season=unlist(v))\n\nggplot() +\n  geom_point(data=df, aes(x=goals, y=value), color=\"red\") +\n  geom_smooth(data=df, aes(x=goals, y=value), method=\"lm\") +\n  geom_text_repel(data=df, aes(x=goals, y=value), label=df$season) +\n  xlab(\"Clean Sheets\") +\n  ylab(\"Market Value, Euros\") +\n  labs(title=paste(player, \"Market Value vs. Clean Sheets\") , caption=\"Source: TransferMarkt Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n    },\n    error=function(e) {\n            message('An Error Occurred')\n            print(e)\n    },\n    warning=function(w) {\n            message('A Warning Occurred')\n            print(w)\n            return(NA)\n    }\n  )\n}\n\n\n\n\nCode\nsuppressMessages(goalsGraphGK(\"Kepa Arrizabalaga\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Kepa Arrizabalaga\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphGK(\"Alisson\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"Alisson\"))\n\n\n\n\n\n\n\nCode\nsuppressMessages(goalsGraphGK(\"André Onana\"))\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nCode\nsuppressMessages(valueGraph(\"André Onana\"))\n\n\n\n\n\nLooking at the pairs of graphs above, we can make some generalized conclusions and bucket players into some broad categories. Players like Kylian Mbappe, Jack Grealish, and Declan Rice are just entering their peaks, or are at least in the period of time where a player’s value baloons at the greatest rate. More “developed” players like Matthijs de Light, Lucas Hernandez, and Andre Onana seem to have found the spot in their careers where they are at their peak of market value and performance, and would almost certainly be shoe-ins to most, if not all, teams in the world.\nOther players, like GKs Alisson, Kepa, as well as CB Harry Maguire, and Forwards Phillipe Coutinho and Antoine Griezmann are seemingly “past their prime” in terms of market value, but are mainstages in their teams at Liverpool, Real Madrid (on loan from Chelsea), Manchester United, Aston Villa, and Atletico Madrid, respectively.\nWhile the above players were selected for a variety of reasons, the main reason was their status as the players who had the highest transfer fees at their respective general positions (F, M, D, G). Goals were used to estimate forwards’ production, while the sum of goals and assists were used to estimate the production value of midfielders. Clean sheets (a VERY rough statistic) were used to estimate the performance of defenders and goalkeepers.\nGiven the above conditions, however, there were some players I had to skip over. Enzo Fernandez(M, Chelsea) and Josko Gvardiol(D, Manchester City) were skipped due to a lack of season data in the TransferMarkt dataset. This is reasonable, since they are both now just playing their 3rd and 4th full seasons in major soccer leagues, and as such, their data was incredibly skewed. Joao Felix, a forward for FC Barcelona on loan from Atletico Madrid, was excluded despite being the 3rd highest transfer fee signing of all time due to a variety of injuries and loans that have hampered his playing time, despite having a handful of seasons under his belt. Wesley Fofana, a defender for Chelsea, was skipped for a similar reason, having only played 24 league games in the last 3 full seasons."
  },
  {
    "objectID": "posts/2023-epa/index.html",
    "href": "posts/2023-epa/index.html",
    "title": "Does it Pay to be Red-Hot in the Redzone?",
    "section": "",
    "text": "Does it pay to be hot early on, or is it better to peak later in the season? Some 2022 NFL teams may give you different answers than others, but let’s see if there’s something bubbling under the sea of data we have available.\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(nflreadr))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\nsuppressMessages(library(ggalt))\n\n\n\n\nCode\nplays2022 &lt;- load_pbp(\n  seasons = c(2022)\n)\n\n\n\n\nCode\nplays2022 &lt;- plays2022 |&gt; filter(play_type == \"run\" | play_type == \"pass\")\n\n\nAfter loading in the data, we need to filter out kickoffs, field goals, etc. just so that we can get non-scoring and “non-procedural” plays, so all runs and passes.\n\n\nCode\nplays2022_3 &lt;- plays2022 |&gt; filter(week &lt;= 3) |&gt; filter(yardline_100 &lt;= 20)\nredzone2022_3 &lt;- plays2022_3 |&gt; group_by(posteam) |&gt; \n  summarise(`RZ Plays Through W3` = n(), \n            `Total EPA from RZ Plays Through W3` = sum(epa), \n            `EPA per RZ Play Through W3` = sum(epa)/n())\n\nhead(redzone2022_3 |&gt; arrange(desc(`EPA per RZ Play Through W3`)))\n\n\n# A tibble: 6 × 4\n  posteam `RZ Plays Through W3` Total EPA from RZ Plays…¹ EPA per RZ Play Thro…²\n  &lt;chr&gt;                   &lt;int&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;\n1 MIA                        20                      9.00                  0.450\n2 DET                        29                     11.7                   0.402\n3 TEN                        14                      5.62                  0.402\n4 BAL                        29                      9.91                  0.342\n5 CHI                        18                      4.16                  0.231\n6 DAL                        16                      3.41                  0.213\n# ℹ abbreviated names: ¹​`Total EPA from RZ Plays Through W3`,\n#   ²​`EPA per RZ Play Through W3`\n\n\nLooking at the 2022 data through 3 weeks, we notice some really interesting things. Despite having run just half the plays as the Detroit Lions, the Tennessee Titans were exactly on par from a EPA per Redzone play metric. Knowing what we know now, the Lions ended with a 9-8 record, and the Titans ended with a measly 7-10 record, with both groups missing the playoffs. Interestingly, the eventual 12-5 Dallas Cowboys were operating at less than half the level of the Dolphins, who would win 3 less games, so perhaps there is something to be said about peaking at the right times.\n\n\nCode\nplays2022_8 &lt;- plays2022 |&gt; filter(week &lt;= 8) |&gt; filter(yardline_100 &lt;= 20)\nredzone2022_8 &lt;- plays2022_8 |&gt; group_by(posteam) |&gt; \n  summarise(`RZ Plays Through W8` = n(), \n            `Total EPA from RZ Plays Through W8` = sum(epa),\n            `EPA per RZ Play Through W8` = sum(epa)/n())\n\nhead(redzone2022_8 |&gt; arrange(desc(`EPA per RZ Play Through W8`)))\n\n\n# A tibble: 6 × 4\n  posteam `RZ Plays Through W8` Total EPA from RZ Plays…¹ EPA per RZ Play Thro…²\n  &lt;chr&gt;                   &lt;int&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;\n1 TEN                        43                      16.8                  0.390\n2 KC                         97                      21.0                  0.216\n3 MIA                        61                      11.1                  0.181\n4 PHI                        79                      11.8                  0.149\n5 ATL                        78                      11.1                  0.142\n6 MIN                        78                      10.8                  0.138\n# ℹ abbreviated names: ¹​`Total EPA from RZ Plays Through W8`,\n#   ²​`EPA per RZ Play Through W8`\n\n\nMoving on 5 weeks later, our top 6 has shifted. The once #5 Chicago Bears are nowhere to be seen, and down the path to a dismal 3-14 record. Eventual Super Bowl Champions Kansas City join the fray, with the soon-to-be NFC champion Philadelphia Eagles also finding their way into the top 6. At the end of Week 8, 5 of our top 6 teams are teams that ended their 17 game slate with a record over .500, with two of those teams playing in the Super Bowl.\nClearly, to some extent, peaking at the right time and leading the league at the right time matters.\n\n\nCode\ncombined &lt;- merge(redzone2022_3, redzone2022_8 ,by=\"posteam\")\ncombined &lt;- combined |&gt; mutate(`Change from W3 to W8` = `EPA per RZ Play Through W8` - `EPA per RZ Play Through W3`)\n\n\n\n\nCode\nhead(combined |&gt; arrange(desc(`Change from W3 to W8`)) |&gt;\n  select(posteam, \"EPA per RZ Play Through W3\", \"EPA per RZ Play Through W8\", \"Change from W3 to W8\"))\n\n\n  posteam EPA per RZ Play Through W3 EPA per RZ Play Through W8\n1     MIN                 -0.3437532                0.137963044\n2     NYJ                 -0.4171309                0.006090288\n3     SEA                 -0.5494196               -0.181844085\n4      TB                 -0.5380498               -0.186703985\n5     LAC                 -0.3174684               -0.032288263\n6      GB                 -0.1867312                0.090250550\n  Change from W3 to W8\n1            0.4817162\n2            0.4232212\n3            0.3675755\n4            0.3513458\n5            0.2851801\n6            0.2769818\n\n\nIn the 2022 season, we can see that the Minnesota Vikings and the New York Jets were the two teams that experienced the biggest gains in EPA. Looking at their individual performances:\nThe Minnesota Vikings started 2-1, but improved to 6-1 at the end of week 8. The Vikings had their bye week in Week 7.\nThe New York Jets started 1-2, ekeing out a 31-30 win on the road against the Cleveland Browns and ended Week 8 with a 5-3 record. Unfortunately for the Jets, their fortune and productivity would soon run out, going 2-7 in the back half of the season. The Jets peaked as a 7-4 team, and then proceeded to not win a single game through all of December and January, crushing their hopes at a postseason berth.\n\n\nCode\nhead(combined |&gt; arrange((`Change from W3 to W8`)) |&gt;\n  select(posteam, \"EPA per RZ Play Through W3\", \"EPA per RZ Play Through W8\", \"Change from W3 to W8\"))\n\n\n  posteam EPA per RZ Play Through W3 EPA per RZ Play Through W8\n1     CHI                  0.2311495                -0.13791863\n2     DET                  0.4020577                 0.04728046\n3     WAS                  0.2111315                -0.11344078\n4     PIT                  0.1872190                -0.10186949\n5     BAL                  0.3417048                 0.05420067\n6     MIA                  0.4500259                 0.18138783\n  Change from W3 to W8\n1           -0.3690682\n2           -0.3547772\n3           -0.3245723\n4           -0.2890885\n5           -0.2875041\n6           -0.2686381\n\n\nOn the flip side, who are our biggest losers?\nThe Chicago Bears and the Detroit Lions, two teams in our Week 3 Top 6, find themselves with the horrible honor of being the biggest losers from Weeks 3 to 8.\nThe Bears made it to Week 3 with a 2-1 record, but then proceeded to win just ONE more game all season, going through the months of November, December, and January without a win. Understandably, their EPA per Redzone play tanks, and continues to tank over the course of 17 games.\nThe Lions, who started 1-2, looked almost CERTAIN for doom at the end of Week 8. After playing 7 games, they had a horrendous 1-6 record, with many chalking them up as tanking candidates. What followed was a series of heroics by the team to win 8 of the next 10 games, with a combined margin of loss of just 17 points. Unfortunately, it would be too little too late for the Lions, who ended 2nd in the NFC North and missed out on a playoff spot due to their head-to-head record against the Seattle Seahawks, who they lost to in a Week 4 shootout that ended 48-45. One field goal going the other way, and perhaps we’d be talking about the Lions in a completely different light.\n\n\nCode\nincrease &lt;- combined |&gt; filter(`EPA per RZ Play Through W3` &lt; `EPA per RZ Play Through W8`)\ndecrease &lt;- combined |&gt; filter(`EPA per RZ Play Through W3` &gt; `EPA per RZ Play Through W8`)\n\nggplot() + \n  geom_dumbbell(\n    data=increase, \n    aes(y=reorder(posteam, `EPA per RZ Play Through W8`), \n        x= `EPA per RZ Play Through W3`, xend=`EPA per RZ Play Through W8`),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\",\n    size=1\n  ) +\n  xlab(\"Expected Points Added per RZ Play\") +\n  ylab(\"Team\") +\n  labs(title=\"Minnesota, NY Jets Amongst Biggest Increases in EPA per RZ Play\", subtitle=\"18 of the NFL's teams saw an increase in EPA per RZ Play from 2022 Week 3 to Week 8\",\n       caption=\"NFL Data | By: Sashwat Venkatesh\")\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\nLooking at the graph of increases, even outside of Minnesota and the Jets, there are some other big gainers. The Seahawks and Tampa Bay both showed big strides, as well as the Broncos, who most would agree were the league’s biggest disappointment in 2022.\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=decrease, \n    aes(y=reorder(posteam, `EPA per RZ Play Through W8`), \n        x= `EPA per RZ Play Through W3`, xend=`EPA per RZ Play Through W8`),\n    colour = \"grey\",\n    colour_x = \"green\",\n    colour_xend = \"blue\",\n    size=1\n  ) +\n  xlab(\"Expected Points Added per RZ Play\") +\n  ylab(\"Team\") +\n  labs(title=\"Chicago, Detroit Amongst Biggest Decreases in EPA per RZ Play\", subtitle=\"14 of the NFL's teams saw an decrease in EPA per RZ Play from Week 3 to Week 8\",\n       caption=\"NFL Data | By: Sashwat Venkatesh\") +\n  scale_color_manual(name = \"\", values = c(\"red\", \"blue\") )\n\n\n\n\n\nLooking at our biggest losers gpaph, Miami is a striking regression down from their hot start. Pundits and talking heads were certain that after a 5-3 start that eventually became 8-3, the Dolphins were destined for something big come playoff time. However, those Dolphins continued their downward dive, lost 5 on the bounce, and bailed themselves out in Week 18 with an 11-6 win over the New York Jets. The data showed us that maybe the Dolphins weren’t destined for something great, but we have to take this with a grain of salt, considering the absolutely shambolic handling of Quarterback Tua Tagovailoa’s concussions.\nTo wrap things up, by week 8, or about 50% of the season, we can get a rough idea as to where teams will end up. Teams that start hot and regress may have some hope, but we can also definitely say that it’s not fair to write off teams that start slow. This data can only tell us, and show us so much, but without a doubt, there’s something to be said about being red-hot in the redzone."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/vb-aces/index.html",
    "href": "posts/vb-aces/index.html",
    "title": "Aces",
    "section": "",
    "text": "So far this season, Maryland’s 14-8 record has been anchored by strong defensive play, but have the Terps been able to convert their defense back into offense and put their opponent on the back foot?\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(ggbeeswarm))\nsuppressMessages(library(ggrepel))\nset.seed(1234)\n\nsuppressMessages(\n  data &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\") |&gt; filter(!is.na(aces), !is.na(pos))\n)\n\ndata &lt;- data |&gt; mutate(apm = aces/mp)\n\nsummary(data$apm)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.0000  0.2917  0.4165  0.7143  2.4000 \n\n\nCode\naavg &lt;- data |&gt; filter(apm &gt;= 0.7143)\n\naavgteam &lt;- aavg |&gt; group_by(team) |&gt; summarise(instances = n())\n\numd &lt;- aavg |&gt; filter(team == \"Maryland Terrapins, Terps\")\n\nggplot() + \n  geom_quasirandom(data=aavg, aes(x=pos, y=apm), color=\"grey\") + \n  geom_quasirandom(data=umd, aes(x=pos, y=apm), color=\"red\") +\n  geom_text_repel(data=umd, aes(x=pos, y=apm, label=last_name)) +\n  labs(title=\"4 Terps Rank in Top 75% of Ace Providers\", caption=\"Source: NCAA Data | By Sashwat Venkatesh\")  + theme_minimal() +\n  xlab(\"Position\") +\n  ylab(\"Aces per Match\")\n\n\n\n\n\nAmongst 327 teams, the Terps roster 4 players who are better than the nation’s 75th percentile in Aces per match (~0.71). Of note, two of these players, Sam Csire and Lilly Gunter, contribute over 1 aces per match, indicating strong offensive performance when compared to the nation. With four players in the nation’s top ranks, the Terps are sure to be a group no one will take for granted come tournament time in December, should they qualify. For other teams, the Terps could play spoiler to those with major tournament hopes."
  },
  {
    "objectID": "posts/hello-world-intro/index.html",
    "href": "posts/hello-world-intro/index.html",
    "title": "Welcome to my blog!",
    "section": "",
    "text": "This is the best thing I’ve probably ever written. And that’s saying a lot."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "TESTING TESTING TESTING"
  },
  {
    "objectID": "posts/maryland-ypp/index.html",
    "href": "posts/maryland-ypp/index.html",
    "title": "Mirror Mirror on the Wall, Who’s the Best Maryland of Them All?",
    "section": "",
    "text": "When Maryland signed Michael Locksley to be their head coach in December of 2018, the fanbase was desperate for improvements across the board. The Terrapins had amassed just 38 wins over the previous 6 years, with just 5 in 2018. Has the former Alabama Offensive Coordinator truly jumped Maryland into greener pastures?\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(lubridate))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(ggrepel))\nsuppressMessages(data &lt;- read_csv(\"https://thescoop.org/sports-data-files/footballlogs1123.csv\"))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nCode\nmaryland &lt;- data |&gt; filter(TeamFull == \"Maryland Terrapins\")\nmaryland &lt;- maryland |&gt; \n  mutate(totalYds = maryland$PassingYds + maryland$RushingYds, \n         defTotalYds = maryland$DefPassingYds + maryland$DefRushingYds\n         )\n\nmaryland$Result[grepl(\"W\", maryland$Result)] &lt;- 1\nmaryland$Result[grepl(\"L\", maryland$Result)] &lt;- 0\nmaryland$Result &lt;- as.integer(maryland$Result)\n\nmarylandByYear &lt;- maryland |&gt; \n  group_by(year(Date)) |&gt; \n  summarise(avgOffYds = sum(totalYds)/sum(OffensivePlays), avgDefYds = sum(defTotalYds)/sum(DefPlays), wins = sum(Result))\n\navgs &lt;- marylandByYear |&gt; \n  ungroup() |&gt; \n  summarise(\n    offense = mean(avgOffYds), \n    defense = mean(avgDefYds)\n    )\n\nggplot() + \n  geom_point(\n    data=marylandByYear, aes(x=avgOffYds, y=avgDefYds, size=wins, color=\"red\")\n    ) +\n  geom_vline(xintercept = avgs$offense) +\n  geom_hline(yintercept = avgs$defense) +\n  geom_text_repel(data=marylandByYear, aes(x=avgOffYds, y=avgDefYds, label=`year(Date)`)) +\n  labs(title=\"A Shift To Offense Since Locksley's Inception\", subtitle=\"4 of Locksley's 5 seasons leading the Terps have seen above average offensive production\" , caption=\"Source: NCAA Data 2011-2023 | By Sashwat Venkatesh\")  + theme_minimal()\n\n\n\n\n\nFrom the data, we can clearly show that Michael Locksley has kickstarted a new era of Terrapins Football. Since he took over as head coach in 2019, in every season since and including 2020, Maryland’s average offensive yards per play has been above program average since 2011, 3 of those 4 years have seen lower than program average yards allowed per play while on defense.\nLocksley’s tenure has also seen 25 wins thus far, with a rocky start in 2019 and 2020, earning just 5 wins across the two years. However, since 21, the program has won 20 games, including 2 bowl victories. So, safe to say, while there was a bumpy start, Maryland has “Locked In”."
  },
  {
    "objectID": "posts/b1g-plays/index.html",
    "href": "posts/b1g-plays/index.html",
    "title": "Less is More? Big Ten Teams Run Less Plays, But Powerhouses Remain Unaffected",
    "section": "",
    "text": "The NCAA’s new clock rules in football were implemented with a view to shorten games and make the viewer experience more palatable. Have they done that? Let’s take a look within the context of the Big Ten:\n\n\nCode\nsuppressMessages(library(tidyverse))\n\n\n\n\nCode\nsuppressMessages(games2022 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs22.csv\"))\nsuppressMessages(games2023 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs23.csv\"))\n\nbig10 &lt;- c(\"Maryland Terrapins\", \"Illinois Fightning Illini\", \"Wisconsin Badgers\", \"Michigan State Spartans\", \"Michigan Wolverines\", \"Indiana Hoosiers\", \"Ohio State Buckeyes\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Nebraska Cornhuskers\", \"Northwestern Wildcats\", \"Purdue Boilermakers\")\n\nb10_games2022 &lt;- games2022 |&gt; filter(TeamFull %in% big10)\nb10_games2023 &lt;- games2023 |&gt; filter(TeamFull %in% big10)\n\ngames2022_playsPerGame &lt;- b10_games2022 |&gt; group_by(TeamFull) |&gt; summarize(avgOffPlays = sum(OffensivePlays)/n())\ngames2023_playsPerGame &lt;- b10_games2023 |&gt; group_by(TeamFull) |&gt; summarize(avgOffPlays = sum(OffensivePlays)/n())\n\ngames2022_playsPerGame &lt;- games2022_playsPerGame |&gt; arrange(desc(avgOffPlays))\n\nggplot() + \n  geom_bar(\n    data=games2022_playsPerGame, \n    aes(x=TeamFull, weight=avgOffPlays)\n  ) +\n  ylab(\"Offensive Plays Per Game\") +\n  xlab(\"Team\") +\n  ggtitle(\"2022 Purdue On Top, but Barely\")+\n  coord_flip() + \n  scale_x_discrete(limits = games2022_playsPerGame$TeamFull[order(games2022_playsPerGame$avgOffPlays)])\n\n\n\n\n\nLooking at the Big Ten teams in 2022, we can see that the perennial Big Ten powerhouses, like Ohio State and Penn State, weren’t necessarily the ones running the most offensive plays. The bar chart we’ve generated here indicates that Northwestern and Purdue, teams that aren’t known for “running” the Big ten like OSU and Penn State are, might suffer from some sort of offensive inefficiency.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=games2023_playsPerGame, \n    aes(x=TeamFull, weight=avgOffPlays)\n  ) +\n  ylab(\"Offensive Plays Per Game\") +\n  xlab(\"Team\") +\n  ggtitle(\"Penn State Surges Ahead This Year\")+\n  coord_flip() +\n  scale_x_discrete(limits = games2023_playsPerGame$TeamFull[order(games2023_playsPerGame$avgOffPlays)])\n\n\n\n\n\nOnce again, in 2023, Purdue is amongst the top teams in terms of Offensive Plays run per game, and sit at a measly 2-4 on the season.\n\n\nCode\ndifferentials &lt;- data.frame(\n  Team = games2022_playsPerGame$TeamFull,\n  playsPerGame2023 = games2023_playsPerGame$avgOffPlays,\n  playsPerGame2022 = games2022_playsPerGame$avgOffPlays\n)\ndifferentials &lt;- differentials |&gt; mutate(Differential = differentials$playsPerGame2023 - differentials$playsPerGame2022)\n\ndifferentials |&gt; arrange(desc(Differential))\n\n\n                       Team playsPerGame2023 playsPerGame2022 Differential\n1         Wisconsin Badgers         80.60000         63.61538   16.9846154\n2             Iowa Hawkeyes         71.40000         59.38462   12.0153846\n3   Rutgers Scarlet Knights         73.00000         63.50000    9.5000000\n4  Minnesota Golden Gophers         66.50000         66.30769    0.1923077\n5      Nebraska Cornhuskers         62.16667         63.41667   -1.2500000\n6   Michigan State Spartans         62.80000         64.41667   -1.6166667\n7        Maryland Terrapins         67.60000         70.38462   -2.7846154\n8          Indiana Hoosiers         68.33333         73.25000   -4.9166667\n9       Ohio State Buckeyes         62.00000         67.38462   -5.3846154\n10      Michigan Wolverines         63.66667         69.28571   -5.6190476\n11      Purdue Boilermakers         66.40000         74.92857   -8.5285714\n12 Penn State Nittany Lions         59.66667         70.07692  -10.4102564\n13    Northwestern Wildcats         55.50000         73.83333  -18.3333333\n\n\nLooking at the differentials between seasons, the new clock rule intended to shorten games seems to be doing just that – in the Big Ten at least. Of the Big Ten’s teams, just 3 have logged an increased in an average number of plays run per game. Those teams, Penn State, Wisconsin, and Michigan State, are 5-0, 4-1, and 2-3, respectively, indicating that there’s something missing here. What are Penn State and Wisconsin doing differently to only have one loss between them?\n(The Badgers’ one loss was to #19 Washington State by 9 points, a result of falling behind early on in what was otherwise an even matchup on paper)"
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Method Behind the Madness? A Deep Dive into Maryland’s Playcalling Mindset",
    "section": "",
    "text": "Late in their Homecoming game on Saturday, October 14th, the Maryland Terrapins seemed poised to win what was already an overcomplicated affair. A team that was 5-1, against a struggling 2-4 conference rival, with Maryland looking to build back some confidence and momentum after a 20 point loss in Columbus against Ohio State.\nOn an incredibly pivotal 3rd down and 6, a scenario that every football team has faced in some situation or another, Maryland made the extremely bold call to… run the ball. The play resulted in a 1 yard loss, and set up what would be a last-play winning drive for the visiting Illinois squad.\nIs there a method behind what some are calling Locksley’s madness? Let’s take a look at a number of plays in 3rd and 6 situations from the last 4+ years’ worth of FBS plays, and see if there’s something we can figure out.\n\n\nCode\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(cfbfastR))\n\npbp &lt;- load_cfb_pbp(seasons = c(2019, 2020, 2021, 2022, 2023))\n\n\n\n\nCode\nlibrary(ggplot2)\nthreeandsix &lt;- pbp |&gt; filter(down == 3) |&gt; filter(distance == 6)\nthreeandsixruns &lt;- threeandsix |&gt; filter(play_type == \"Rush\")\nplaytypes &lt;- threeandsix |&gt; group_by(play_type) |&gt; summarise(\n  instances = n()\n) |&gt; arrange(desc(instances))\n\n\nBelow, we can see the distribution of play outcomes for all plays run on 3rd Down with 6 yards to go:\n\n\nCode\nplaytypes\n\n\n# A tibble: 19 × 2\n   play_type                            instances\n   &lt;chr&gt;                                    &lt;int&gt;\n 1 Pass Reception                            3484\n 2 Pass Incompletion                         2859\n 3 Rush                                      2359\n 4 Penalty                                    813\n 5 Timeout                                    674\n 6 Sack                                       613\n 7 Passing Touchdown                          383\n 8 Interception Return                        182\n 9 Rushing Touchdown                          100\n10 Fumble Recovery (Opponent)                  83\n11 Fumble Recovery (Own)                       55\n12 Interception Return Touchdown               24\n13 Field Goal Good                             13\n14 Field Goal Missed                            3\n15 Fumble Return Touchdown                      3\n16 Punt                                         3\n17 Safety                                       2\n18 Blocked Field Goal                           1\n19 Fumble Recovery (Opponent) Touchdown         1\n\n\nVery clearly, the overwhelming choice for offenses on 3rd and 6 is to pass the ball, with over half of all plays in this scenario being a pass, since 2019. For the purposes of this investigation, we’re taking plays in isolation. For example, interceptions are not counted as Pass Incompletions, and fumbles after a rush or pass completion are counted as fumbles, not as both a Rush/Pass Reception AND fumble. With this knowledge in mind, let’s move forward, and understand how many of these runs are actually successful in achieving a new set of downs.\n\n\nCode\nsuccessRuns &lt;- threeandsixruns |&gt; filter(yards_gained &gt;= 6)\nsuccessRuns &lt;- successRuns |&gt; group_by(play_type) |&gt; summarise(instances=n())\nsuccessRuns\n\n\n# A tibble: 1 × 2\n  play_type instances\n  &lt;chr&gt;         &lt;int&gt;\n1 Rush            871\n\n\nSo then, out of 2,459 rushes run on 3rd and 6 in the last 4-and-change years in college football, just 971, or 39.5% of them, gain 6 or more than 6 yards.\nNOTE: The above calculation comes from 871 runs that gained 6 or more yards but did not score a touchdown, as well as 100 runs on 3rd and 6, which, logically, implies that they gained at least 6 yards.\nSo running on 3rd and 6 doesn’t actually seem like the worst play in the world, as over 40% of those attempts actually end up getting the job (or more!) done.\nSo who are our most frequent users (or abusers?) of this play?\n\n\nCode\nthreeandsixrunTeams &lt;- threeandsixruns |&gt; group_by(pos_team) |&gt; summarise(instances = n()) |&gt; arrange(desc(instances))\nthreeandsixrunTeams\n\n\n# A tibble: 261 × 2\n   pos_team         instances\n   &lt;chr&gt;                &lt;int&gt;\n 1 Navy                    49\n 2 Army                    42\n 3 Air Force               30\n 4 Georgia Southern        28\n 5 Baylor                  25\n 6 Oklahoma State          24\n 7 Kent State              23\n 8 Louisiana               23\n 9 New Mexico              23\n10 Arkansas                22\n# ℹ 251 more rows\n\n\nUnsurprisingly, we see that the three service academies are the top 3 teams who choose to run on 3rd and 6. This tracks with the “eye test” that those 3 teams are VERY run heavy. Maryland, since 2019, sits at 40th place out of 331 tracked FBS teams, which is still significantly above the average, which maybe starts to point us towards the fact that this isn’t out of the ordinary for Maryland\n\n\nCode\nthreeandsixUMD &lt;- threeandsix |&gt; group_by(pos_team, play_type) |&gt; summarise(instances = n()) |&gt; filter(pos_team == \"Maryland\")\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nthreeandsixUMD\n\n\n# A tibble: 10 × 3\n# Groups:   pos_team [1]\n   pos_team play_type                  instances\n   &lt;chr&gt;    &lt;chr&gt;                          &lt;int&gt;\n 1 Maryland Fumble Recovery (Opponent)         2\n 2 Maryland Interception Return                1\n 3 Maryland Pass Incompletion                 11\n 4 Maryland Pass Reception                    13\n 5 Maryland Passing Touchdown                  4\n 6 Maryland Penalty                            2\n 7 Maryland Rush                              15\n 8 Maryland Rushing Touchdown                  1\n 9 Maryland Sack                               4\n10 Maryland Timeout                            2\n\n\nSpecifically looking at Maryland’s 3rd and 6 data, it’s easy to see that this is more of a surprise in THIS context. Maryland has 29 passing plays as compared to 16 rush plays, a 65-35 split in play calls for this down and distance situation.\nSo what was the logic going into this play call?\n\n\nCode\ntemp1 &lt;- threeandsix |&gt; \n  filter(year==2023) |&gt; \n  group_by(def_pos_team, play_type) |&gt;\n  filter(yards_gained &gt;= 6) |&gt;\n  summarise(instances = n())\n\n\n`summarise()` has grouped output by 'def_pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nfinal1 &lt;- temp1 |&gt; \n  group_by(def_pos_team) |&gt; \n  summarise(conversionsAllowed = sum(instances)) |&gt; \n  arrange(desc(conversionsAllowed))\n\nfinal1\n\n\n# A tibble: 241 × 2\n   def_pos_team  conversionsAllowed\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Texas State                    8\n 2 Cal Poly                       7\n 3 Kent State                     7\n 4 South Florida                  7\n 5 Wyoming                        7\n 6 Alabama                        6\n 7 Baylor                         6\n 8 Florida State                  6\n 9 Illinois                       6\n10 Northern Iowa                  6\n# ℹ 231 more rows\n\n\n\n\nCode\ntemp2 &lt;- threeandsixruns |&gt; \n  filter(year==2023) |&gt; \n  group_by(def_pos_team, play_type) |&gt;\n  filter(yards_gained &gt;= 6) |&gt;\n  summarise(instances = n())\n\n\n`summarise()` has grouped output by 'def_pos_team'. You can override using the\n`.groups` argument.\n\n\nCode\nfinal2 &lt;- temp2 |&gt; \n  group_by(def_pos_team) |&gt; \n  summarise(conversionsAllowedFromRun = sum(instances)) |&gt; \n  arrange(desc(conversionsAllowedFromRun))\n\nfinal2\n\n\n# A tibble: 101 × 2\n   def_pos_team  conversionsAllowedFromRun\n   &lt;chr&gt;                             &lt;int&gt;\n 1 Alabama                               4\n 2 Cal Poly                              3\n 3 Illinois                              3\n 4 Texas State                           3\n 5 Virginia Tech                         3\n 6 Akron                                 2\n 7 Baylor                                2\n 8 Bucknell                              2\n 9 Duquesne                              2\n10 Idaho                                 2\n# ℹ 91 more rows\n\n\nHere’s the logic at hand, or at least my best guess, given the data we have:\nSo far in 2023, as seen in the table above, the Illini defense has faced 3rd and 6 a total of six times. Of those 6 times, 50% of successful conversions they’ve allowed have come on the ground, via runs.\nDoes this justify what the average fan might call a “boneheaded” or “stupid” play? Perhaps not. At the very least, however, it provides us with a base on which we can make an educated guess to the question: “Why did Locksley run in THAT situation?”"
  },
  {
    "objectID": "posts/running-on-empty/index.html",
    "href": "posts/running-on-empty/index.html",
    "title": "No Steps Forward, But Many Steps Backwards",
    "section": "",
    "text": "Code\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(ggplot2))\nsuppressMessages(library(scales))\nsuppressMessages(library(formattable))\nsuppressMessages(logs &lt;- read_csv(\"https://www.thescoop.org/sports-data-files/footballlogs23.csv\"))\n\n\n\n\nCode\nb1g &lt;- c(\"Maryland Terrapins\", \"Michigan Wolverines\", \"Michigan State Spartans\", \"Nebraska Cornhuskers\",\n         \"Indiana Hoosiers\", \"Ohio State Buckeyes\", \"Penn State Nittany Lions\", \"Rutgers Scarlet Knights\",\n         \"Illinois Fighting Illini\", \"Iowa Hawkeyes\", \"Minnesota Golden Gophers\", \"Northwestern Wildcats\",\n         \"Purdue Boilermakers\", \"Wisconsin Badgers\")\nrunningLogs &lt;- logs |&gt; select(TeamFull, Opponent, Date, Game, RushingYds, RushingAtt, Result)\nrunningLogs &lt;- runningLogs |&gt; mutate(YPC = RushingYds/RushingAtt)\nb1gRunning &lt;- runningLogs |&gt; filter(TeamFull %in% b1g)\n\ntemp &lt;- b1gRunning |&gt; summarise(sum(RushingYds)/sum(RushingAtt))\n\n#b1gRunningAveragers &lt;- b1gRunning |&gt; \n#  group_by(TeamFull) |&gt; \n#  summarise(games = n(), totalRushYds = sum(RushingYds), totalRush = sum(RushingAtt), \n#            YPC = sum(RushingYds)/sum(RushingAtt))\n\n\nBefore Maryland’s Saturday showdown against Penn State, many Terrapin fans already had the outcome in their minds: an impending domination by the Nittany Lions in College Park. What followed, by most accounts, was somehow worse than the worst case scenario. Despite the 43W-2L-1T record Penn State holds against the Terrapins, the 15-51 loss the Terrapins suffered was plagued by stagnant offense, and a game from the defense that looked like a group of spectators had been picked from the stands to play against Penn State.\n\n\nCode\nggplot() + \n  geom_hline(yintercept=3.934071, color=\"blue\") +\n  geom_hline(yintercept=0.000000, color=\"red\") +\n  geom_line(data=b1gRunning, aes(x=Game, y=YPC, group=TeamFull)) + \n  scale_y_continuous(limits = c(-3.5, 8)) +\n  scale_x_continuous(limits = c(1, 9), breaks = pretty_breaks()) +\n  facet_wrap(~TeamFull) +\n  ylab(\"Yards per Carry\") +\n  labs(title=\"A Nightmare Showing from the Terps\", subtitle = \"Terrapins become the first B1G team to average negative rushing yards per carry in 2023\", caption = \"NCAA Data | Created By Sashwat Venkatesh\") + \n  theme_minimal()\n\n\n\n\n\nOn Saturday night, as fans slowly filtered out of SECU Stadium, the Terrapins became the first Big Ten team to achieve a rather dubious statline: They averaged -3.2 yards per rushing attempt, the first game this season where a Big Ten team averaged less than ZERO yards per attempt. This is by and far the worst running game performance from a squad this season, with the next worst performance coming from Iowa’s October 21st matchup against Minnesota, where the Hawkeyes averaged 0.4 yards per attempt.\nAcross the ~600 Division 1 college football games played this season, just SIX have ended with a team in negative rushing yards. Unfortunately, not being the only team in the nation doesn’t save Maryland here:\n\n\nCode\ndf &lt;- runningLogs |&gt; filter(RushingYds &lt; 0 ) |&gt; select(TeamFull, Opponent, RushingYds, YPC, Result) |&gt; arrange(YPC)\nformattable(df, list(YPC = color_bar(\"#FF7276\")))\n\n\n\n\n\n\n\nTeamFull\n\n\nOpponent\n\n\nRushingYds\n\n\nYPC\n\n\nResult\n\n\n\n\n\n\nMaryland Terrapins\n\n\nPenn State\n\n\n-51\n\n\n-3.18750000\n\n\nL (15-51)\n\n\n\n\nTroy Trojans\n\n\nJames Madison\n\n\n-12\n\n\n-0.63157895\n\n\nL (14-16)\n\n\n\n\nColorado Buffaloes\n\n\nOregon State\n\n\n-7\n\n\n-0.36842105\n\n\nL (19-26)\n\n\n\n\nHawaii Rainbow Warriors\n\n\nStanford\n\n\n-5\n\n\n-0.31250000\n\n\nL (24-37)\n\n\n\n\nMarshall Thundering Herd\n\n\nJames Madison\n\n\n-4\n\n\n-0.12500000\n\n\nL (9-20)\n\n\n\n\nSouth Carolina Gamecocks\n\n\nNorth Carolina\n\n\n-2\n\n\n-0.06451613\n\n\nL (17-31)\n\n\n\n\n\n\n\nOf the 6 teams that have suffered a similar fate, the Terrapins, in their game, had the most lost rushing yards (-51), the worst margin of loss (-36), as well as the lowest yards per carry.\nIt’s safe to say that for a team that’s been sitting at 5 wins since September 30 and has now lost 4 straight, getting that elusive 6th and bowl eligibility earning win will be no easy feat. The Terrapins remaining schedule sees them playing @Nebraska, another 5-4 team looking to find their footing and 6th win, followed by a now 9-0 Michigan Wolverines team who will surely be in the discussions for the College Football Playoff, before ending the the season in Piscataway playing at Rutgers, who have already clinched their 6th win.\nTo the powers that be at Maryland Football’s coaching and playcalling staff, I humbly submit the following:\nDominating the run game isn’t always sure shot to winning football games, but averaging more than 0 yards per rushing attempt might just be a good first step in getting there."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Between the Points",
    "section": "",
    "text": "No Steps Forward, But Many Steps Backwards\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nDoes it Pay to be Red-Hot in the Redzone?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nSoccer’s Biggest Steals and Scams: An Analysis of Transfer Business in Soccer Transfer Markets\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nAces\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nMirror Mirror on the Wall, Who’s the Best Maryland of Them All?\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nMethod Behind the Madness? A Deep Dive into Maryland’s Playcalling Mindset\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nLess is More? Big Ten Teams Run Less Plays, But Powerhouses Remain Unaffected\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 8, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nWelcome to my blog!\n\n\n\n\n\n\n\nwelcome\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nSashwat Venkatesh\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 2, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]